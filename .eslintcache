[{"/home/alec/swap-share/src/index.js":"1","/home/alec/swap-share/src/App.js":"2","/home/alec/swap-share/src/reportWebVitals.js":"3","/home/alec/swap-share/src/components/WalletButton.js":"4","/home/alec/swap-share/src/hooks/useWeb3Modal.js":"5","/home/alec/swap-share/src/components/index.js":"6","/home/alec/swap-share/src/components/BorrowRequest.js":"7","/home/alec/swap-share/src/components/SwapShare.js":"8","/home/alec/swap-share/src/Constants.js":"9","/home/alec/swap-share/src/components/OpenLoans.js":"10","/home/alec/swap-share/src/components/SplashPage.js":"11","/home/alec/swap-share/src/components/LoanCard.js":"12","/home/alec/swap-share/src/components/LoadingModal.js":"13","/home/alec/swap-share/src/components/GetMockDAI.js":"14"},{"size":476,"mtime":1610304631291,"results":"15","hashOfConfig":"16"},{"size":4379,"mtime":1610407873475,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1608155728010,"results":"18","hashOfConfig":"16"},{"size":402,"mtime":1608235219011,"results":"19","hashOfConfig":"16"},{"size":1598,"mtime":1610396628526,"results":"20","hashOfConfig":"16"},{"size":1542,"mtime":1609992252930,"results":"21","hashOfConfig":"16"},{"size":7527,"mtime":1610406305783,"results":"22","hashOfConfig":"16"},{"size":9474,"mtime":1610406913254,"results":"23","hashOfConfig":"16"},{"size":482,"mtime":1610397203521,"results":"24","hashOfConfig":"16"},{"size":4065,"mtime":1610406554783,"results":"25","hashOfConfig":"16"},{"size":370,"mtime":1609973857836,"results":"26","hashOfConfig":"16"},{"size":2820,"mtime":1610212610573,"results":"27","hashOfConfig":"16"},{"size":542,"mtime":1610406296047,"results":"28","hashOfConfig":"16"},{"size":1595,"mtime":1610407807559,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1yv57jw",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alec/swap-share/src/index.js",[],["64","65"],"/home/alec/swap-share/src/App.js",["66","67"],"/home/alec/swap-share/src/reportWebVitals.js",[],"/home/alec/swap-share/src/components/WalletButton.js",[],"/home/alec/swap-share/src/hooks/useWeb3Modal.js",["68"],"import { useEffect, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\nimport dotenv from 'dotenv'\n\ndotenv.config()\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = process.env.PROJECT_ID;\n\nconst NETWORK_NAME = \"rinkeby\";\n\nfunction useWeb3Modal(config = {}) {\n  const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const { infuraId = INFURA_ID, NETWORK = NETWORK_NAME } = config;\n\n  useEffect(() => {\n    const modal = new Web3Modal({\n      network: NETWORK,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId,\n          },\n        },\n      },\n    })\n    setWeb3Modal(modal)\n  }, [])\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = async () => {\n    let newProvider = null;\n    try {\n      newProvider = await web3Modal.connect();\n    } catch (error) {\n      // Modal was closed by user, we dont have to do anything\n    }\n\n    if (newProvider) {\n      setProvider(newProvider)\n    }\n  }\n\n  // Disconnect from wallet\n  const logoutOfWeb3Modal = async () => {\n    if (window.web3.currentProvider && window.web3.currentProvider.close) {\n      await window.web3.currentProvider.close();\n    }\n    web3Modal.clearCachedProvider();\n    window.location.reload();\n    setProvider(null);\n  }\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","/home/alec/swap-share/src/components/index.js",[],"/home/alec/swap-share/src/components/BorrowRequest.js",["69","70","71"],"import React, { useState } from 'react'\nimport BigNumber from \"bignumber.js\"\n\nimport { Title } from './index'\nimport LoadingModal from './LoadingModal'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst BorrowRequest = ({ account, swapShareContract, daiContract, setUpdateRequests }) => {\n    const [validated, setValidated] = useState(false)\n    const [approved, setApproved] = useState(false)\n\n    const [loadingApproval, setLoadingApproval] = useState(false)\n    const [loadingSend, setLoadingSend] = useState(false)\n\n    const approvalAmount = new BigNumber('100000e+18').toFixed()\n\n    const [daiAmount, setDaiAmount] = useState('')\n    const [ethAmount, setEthAmount] = useState('')\n    const [loanDuration, setLoanDuration] = useState({\n                                                days:    '',\n                                                hours:   '',\n                                                minutes: ''\n                                            })\n    const [interestRate, setInterestRate] = useState('3')\n\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        const loanDays = loanDuration.days == '' ? 0 : parseInt(loanDuration.days)\n        const loanHours = loanDuration.hours == '' ? 0 : parseInt(loanDuration.hours)\n        const loanMinutes = loanDuration.minutes == '' ? 0 : parseInt(loanDuration.minutes)\n       \n        let now = new Date()\n        let timeDelta = new Date()\n        timeDelta.setDate(timeDelta.getDate() + loanDays)\n        timeDelta.setHours(timeDelta.getHours() + loanHours)\n        timeDelta.setMinutes(timeDelta.getMinutes() + loanMinutes)\n\n        let expirationDelta = parseInt((timeDelta.getTime() / 1000) - (now.getTime() / 1000))\n    \n        if (form.checkValidity() === false) {\n          event.stopPropagation();\n        } else {\n            setValidated(true);\n            submitBorrowRequest(expirationDelta)\n        }\n\n        event.preventDefault()\n      };\n\n    const handleChange = setFunc => e => {\n        setFunc(e.target.value)\n    }\n\n    function submitBorrowRequest(expirationDelta) {\n        let amountToSend = new BigNumber(`${daiAmount}e+18`).toFixed()\n        let ethRequested = new BigNumber(`${ethAmount}e+18`).toFixed()\n\n        if (approved) {\n            sendDAI(expirationDelta, amountToSend, ethRequested, interestRate)\n        } else {\n            setLoadingApproval(true)\n\n            daiContract.methods\n            .approve(swapShareContract._address, approvalAmount)\n            .send({from: account})\n            .then(() => {\n                setApproved(true)\n                setLoadingApproval(false)\n                sendDAI(expirationDelta, amountToSend, ethRequested, interestRate)\n            })\n            .catch(e => {\n                console.error(e)\n                setLoadingApproval(false)\n            })\n        }\n    }\n\n    function sendDAI(expiration, amount, ethRequested, interestRate) {\n        setLoadingSend(true)\n        swapShareContract.methods\n            .requestLoan(expiration, amount, ethRequested, interestRate)\n            .send({from: account})\n            .then(() => {\n                setUpdateRequests(true)\n                setLoadingSend(false)\n            })\n            .catch(e => {\n                console.error(e)\n                setLoadingSend(false)\n            })\n    }\n\n    return (\n        <div>\n            <Form noValidate validated={validated} onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column'}}>\n                <Form.Label>\n                    <Title>Create a Borrow Request</Title>\n                </Form.Label>\n\n                <Form.Group>\n                    <Form.Text className=\"text-muted mb-2\" style={{fontSize: '1.1rem'}}>ETH to request</Form.Text>\n                    <Form.Control placeholder=\"ETH amount\" value={ethAmount} onChange={handleChange(setEthAmount)} required />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please specify ETH.\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Text className=\"text-muted mb-2\" style={{fontSize: '1.1rem'}}>DAI to store as collateral</Form.Text>\n                    <Form.Control placeholder=\"DAI amount\" value={daiAmount} onChange={handleChange(setDaiAmount)} required />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please specify DAI.\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Text className=\"text-muted mb-2\" style={{fontSize: '1.1rem'}}>Interest rate that you will borrow at: {interestRate}%</Form.Text>\n                    <Form.Control value={interestRate} onChange={handleChange(setInterestRate)} type=\"range\" min=\"1\" max=\"20\" required />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Text className=\"text-muted mb-2\" style={{fontSize: '1.1rem'}}>Duration of loan before expiration</Form.Text>\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                        <div style={{width: '6rem'}}>   \n                            <Form.Control \n                                style={{textAlign: 'center'}} \n                                placeholder=\"0\"\n                                value={loanDuration.days} \n                                onChange={e =>  setLoanDuration({...loanDuration, days: e.target.value})} />\n                            <Form.Text style={{textAlign: 'center'}}>Days</Form.Text>\n                        </div>\n                        <div style={{width: '6rem'}}>   \n                            <Form.Control \n                                style={{textAlign: 'center'}} \n                                placeholder=\"0\"\n                                value={loanDuration.hours} \n                                onChange={e => setLoanDuration({...loanDuration, hours: e.target.value})} />\n                            <Form.Text style={{textAlign: 'center'}}>Hours</Form.Text>\n                        </div>\n                        <div style={{width: '6rem'}}>   \n                            <Form.Control \n                                style={{textAlign: 'center'}} \n                                placeholder=\"0\"\n                                value={loanDuration.minutes} \n                                onChange={e => setLoanDuration({...loanDuration, minutes: e.target.value})} />\n                            <Form.Text style={{textAlign: 'center'}}>Minutes</Form.Text>\n                        </div>\n                    </div>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please specify a correct duration.\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Button className=\"mt-4\" variant=\"light\" type=\"submit\">Submit</Button>\n            </Form>\n            <LoadingModal show={(loadingApproval || loadingSend)}>\n                <div>\n                    {loadingApproval && \n                        <div style={{textAlign: 'center'}}>Awaiting blockchain approval confirmation...</div>\n                    }\n                    {loadingSend && \n                        <div style={{textAlign: 'center'}}>Awaiting transaction confirmation...</div>\n                    }\n                </div>\n            </LoadingModal>\n        </div>\n    );\n  }\n\nexport default BorrowRequest","/home/alec/swap-share/src/components/SwapShare.js",["72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"import React, { useEffect, useState } from 'react'\n\nimport { Container, Title } from './index'\nimport BorrowRequest from './BorrowRequest'\nimport LoanCard from './LoanCard'\nimport LoadingModal from './LoadingModal'\nimport { LOAN_STATE, TIME_SECONDS } from '../Constants'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\n\nconst SwapShare = ({web3, account, swapShareContract, DAIContract}) => {\n  const [fulfilledLoans, setFulfilledLoans] = useState(null)\n  const [borrowTransactions, setBorrowTransactions] = useState(null)\n  const [updateRequests, setUpdateRequests] = useState(true)\n\n  const [loadingCancel, setLoadingCancel] = useState(false)\n  const [loadingRepay, setLoadingRepay] = useState(false)\n  const [loadingClaim, setLoadingClaim] = useState(false)\n\n\n  // Data is refreshed when the user switches accounts\n  useEffect(() => {\n    if (!updateRequests) {\n      getAddressBorrows()\n      getAddressFulfilledLoans()\n    }\n  }, [account])\n\n  useEffect(() => {\n    if (updateRequests) {\n      getAddressBorrows()\n      getAddressFulfilledLoans()\n      setUpdateRequests(false)\n    }\n  }, [updateRequests])\n\n  useEffect(() => {\n    if (borrowTransactions && borrowTransactions.length == 0) {\n      setBorrowTransactions(null)\n    }\n  }, [borrowTransactions])\n\n  useEffect(() => {\n    if (fulfilledLoans && fulfilledLoans.length == 0) {\n      setFulfilledLoans(null)\n    }\n  }, [fulfilledLoans])\n\n  function getAddressBorrows() {\n    swapShareContract.methods\n      .getAddressBorrows(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const expirationDelta = parseInt(value['expirationDelta'])\n            const now = new Date()\n\n            const numDays = Math.floor(expirationDelta / TIME_SECONDS.day)\n            const remainingHours = expirationDelta - (numDays * TIME_SECONDS.day)\n\n            const numHours = Math.floor(remainingHours / TIME_SECONDS.hour)\n            const remainingMinutes = remainingHours - (numHours * TIME_SECONDS.hour)\n\n            const numMinutes = Math.floor(remainingMinutes / TIME_SECONDS.minute)\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': (value['state'] == LOAN_STATE.fulfilled ? expiration.toDateString() : ''),\n              'expirationTime': (value['state'] == LOAN_STATE.fulfilled ? expiration.toLocaleTimeString() : ''),\n              'loanDuration': {days: numDays, hours: numHours, minutes: numMinutes},\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': (value['state'] == LOAN_STATE.fulfilled && (expiration < now))\n            })\n          }\n        })\n        setBorrowTransactions(transactions)\n      })\n  }\n\n  function getAddressFulfilledLoans() {\n    swapShareContract.methods\n      .getAddressFulfilled(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const expirationDelta = parseInt(value['expirationDelta'])\n            const now = new Date()\n\n            const numDays = Math.floor(expirationDelta / TIME_SECONDS.day)\n            const remainingHours = expirationDelta - (numDays * TIME_SECONDS.day)\n\n            const numHours = Math.floor(remainingHours / TIME_SECONDS.hour)\n            const remainingMinutes = remainingHours - (numHours * TIME_SECONDS.hour)\n\n            const numMinutes = Math.floor(remainingMinutes / TIME_SECONDS.minute)\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': (value['state'] == LOAN_STATE.fulfilled ? expiration.toDateString() : ''),\n              'expirationTime': (value['state'] == LOAN_STATE.fulfilled ? expiration.toLocaleTimeString() : ''),\n              'loanDuration': {days: numDays, hours: numHours, minutes: numMinutes},\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': (value['state'] == LOAN_STATE.fulfilled && (expiration < now))\n            })\n          }\n        })\n        setFulfilledLoans(transactions)\n      })\n  }\n\n\n  const cancelBorrowRequest = (index) => () => {\n    setLoadingCancel(true)\n\n    swapShareContract.methods\n        .cancelRequestedLoan(index)\n        .send({from: account})\n        .then(() => {\n          setLoadingCancel(false)\n          getAddressBorrows()\n        })\n        .catch(e => {\n          setLoadingCancel(false)\n        })\n  }  \n\n\n  const payBackLoan = (index, amount)  => () => {\n    const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n\n    setLoadingRepay(true)\n\n    swapShareContract.methods\n      .repayLoan(index)\n      .send({\n        from: account,\n        value: ethAmount\n      })\n      .then(() => {\n        getAddressBorrows()\n        setLoadingRepay(false)\n      })\n      .catch(e => {\n        console.error(e)\n        setLoadingRepay(false)\n      })\n  }\n\n  const claimCollateral = (index) => () => {\n    setLoadingClaim(true)\n\n    swapShareContract.methods\n      .claimDefaultedLoan(index)\n      .send({\n        from: account\n      })\n      .then(() => {\n        getAddressFulfilledLoans()\n        setLoadingClaim(false)\n      })\n      .catch(e => {\n        console.error(e)\n        setLoadingClaim(false)\n      })\n  }\n\n  return (\n    <Container>\n      <div style={{display: 'flex', backgroundColor: '#282c34', justifyContent: 'space-between'}}>\n        <Col className=\"mx-4\" md={3}>\n          <Title className=\"mb-4\">Loans You have Fulfilled</Title>\n          {fulfilledLoans\n            ? <div>\n                {fulfilledLoans.map((value, index) => (\n                  <LoanCard data={value} key={index}>\n                    <Button \n                        variant={value.hasExpired ? 'success' : 'secondary'} \n                        disabled={!value.hasExpired}\n                        onClick={claimCollateral(value.index)}\n                    >\n                      {value.hasExpired ? 'claim collateral' : 'active'}\n                    </Button>   \n                  </LoanCard>\n                ))}\n              </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>Nothing to display</div>\n          }\n        </Col>\n\n        <Col className=\"mx-4\" md={3}>\n          <BorrowRequest \n            account={account} \n            swapShareContract={swapShareContract} \n            daiContract={DAIContract} \n            setUpdateRequests={setUpdateRequests} \n          />\n        </Col>\n\n        <Col className=\"mx-4\" md={3}>\n          <Title className=\"mb-4\">Borrow Requests</Title>\n          {borrowTransactions\n            ? <div>\n                {borrowTransactions.map((value, index) => (\n                  <LoanCard data={value} key={index}>\n                    <div>\n                        {!value.hasExpired && \n                          <Button \n                            variant={value.state == LOAN_STATE.requested ? 'danger' : 'success'} \n                            disabled={value.state == LOAN_STATE.fulfilled}\n                            onClick={cancelBorrowRequest(value.index)}\n                          >\n                            {value.state == LOAN_STATE.requested ? 'cancel request' : 'active'}\n                          </Button>\n                        }\n                        {value.state == LOAN_STATE.fulfilled &&\n                          <Button \n                            variant={value.hasExpired ? \"danger\" : \"primary\"} \n                            className=\"ml-2\"\n                            disabled={value.hasExpired}\n                            onClick={payBackLoan(value.index, value.ethPlusInterest)}\n                          >\n                            {value.hasExpired ? 'Loan has Defaulted' : 'Pay back loan'}\n                          </Button>\n                        }\n                      </div>\n                  </LoanCard>\n                ))}\n              </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>Nothing to display</div>\n          }\n        </Col>\n      </div>\n      <div>\n        <LoadingModal show={loadingCancel}>\n          <div style={{textAlign: 'center'}}>Awaiting blockchain cancel confirmation...</div>\n        </LoadingModal>\n        <LoadingModal show={loadingRepay}>\n          <div style={{textAlign: 'center'}}>Awaiting blockchain repayment confirmation...</div>\n        </LoadingModal>\n        <LoadingModal show={loadingClaim}>\n          <div style={{textAlign: 'center'}}>Awaiting blockchain claim confirmation...</div>\n        </LoadingModal>\n      </div>\n    </Container>\n  );\n}\n\nexport default SwapShare\n","/home/alec/swap-share/src/Constants.js",[],"/home/alec/swap-share/src/components/OpenLoans.js",["88","89","90","91","92"],"import React, { useEffect, useState } from 'react'\n\nimport { Container, Title } from './index'\nimport LoanCard from './LoanCard'\nimport LoadingModal from './LoadingModal'\nimport { LOAN_STATE, TIME_SECONDS } from '../Constants'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\nconst OpenLoans = ({ web3, account, swapShareContract }) => {\n    const [openLoans, setOpenLoans] = useState(null)\n\n    const [loadingFulfill, setLoadingFulfill] = useState(false)\n\n    useEffect(() => {\n        getAllOpenLoans()\n    }, [account])\n\n    useEffect(() => {\n        if (openLoans && openLoans.length === 0) {\n            setOpenLoans(null)\n        }\n    }, [openLoans])\n\n    const getAllOpenLoans = () => {\n        swapShareContract.methods\n          .getAllRequests(account)\n          .call()\n          .then(result => {\n            let transactions = [];\n            result.map(value => {\n              if (value['valid']) {\n                const expiration = new Date(parseInt(value['expiration']) * 1000)\n                const expirationDelta = parseInt(value['expirationDelta'])\n                const now = new Date()\n    \n                const numDays = Math.floor(expirationDelta / TIME_SECONDS.day)\n                const remainingHours = expirationDelta - (numDays * TIME_SECONDS.day)\n    \n                const numHours = Math.floor(remainingHours / TIME_SECONDS.hour)\n                const remainingMinutes = remainingHours - (numHours * TIME_SECONDS.hour)\n    \n                const numMinutes = Math.floor(remainingMinutes / TIME_SECONDS.minute)\n    \n                transactions.push({\n                  'index': value['index'],\n                  'expirationDate': (value['state'] == LOAN_STATE.fulfilled ? expiration.toDateString() : ''),\n                  'expirationTime': (value['state'] == LOAN_STATE.fulfilled ? expiration.toLocaleTimeString() : ''),\n                  'loanDuration': {days: numDays, hours: numHours, minutes: numMinutes},\n                  'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n                  'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n                  'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n                  'interestRate': value['interestRate'],\n                  'state': value['state'],\n                  'hasExpired': (value['state'] == LOAN_STATE.fulfilled && (expiration < now))\n                })\n              }\n            })\n            setOpenLoans(transactions)\n          })\n      }\n\n      const fulfillLoan = (index, amount) => () => {\n        const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n        setLoadingFulfill(true)\n    \n        swapShareContract.methods\n          .fulfillLoan(index)\n          .send({\n            from: account,\n            value: ethAmount\n          })\n          .then(() => {\n            setLoadingFulfill(false)\n            getAllOpenLoans()\n          })\n          .catch(e => {\n            console.error(e)\n            setLoadingFulfill(false)\n          })\n      }\n\n    return (\n      <Container>\n        <Col className=\"mx-auto\" md={4}>\n          <Title className=\"mb-4\">Open Loan Requests</Title>\n          {openLoans\n            ? <div>\n                {openLoans.map((value, index) => (\n                  <LoanCard data={value} key={index}>\n                    <Button variant='success' onClick={fulfillLoan(value.index, value.ethAmount)}>\n                        fulfill loan\n                    </Button>\n                  </LoanCard>\n                ))}\n                </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>\n                No loans to display at this time\n              </div>\n          }\n        </Col>\n        <div>\n          <LoadingModal show={loadingFulfill}>\n            <div style={{textAlign: 'center'}}>Awaiting blockchain fulfill confirmation...</div>\n          </LoadingModal>\n        </div>\n      </Container>\n    )\n  }\n\nexport default OpenLoans","/home/alec/swap-share/src/components/SplashPage.js",[],"/home/alec/swap-share/src/components/LoanCard.js",["93","94"],"import React, { useState } from 'react'\n\nimport { LOAN_STATE } from '../Constants'\n\nimport Card from 'react-bootstrap/Card'\nimport Collapse from 'react-bootstrap/Collapse'\n\nconst LoanCard = ({ data, children }) => {\n    const [open, setOpen] = useState(false)\n\n    return (\n        <Card className=\"mb-4\" style={{color: '#282c34', minWidth: '20rem'}}>\n            <Card.Header style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                <div>\n                    <div>Requested: {data.ethAmount} ETH</div>\n                    <div>Collateral: {data.daiAmount} DAI</div>\n                </div>\n                <div \n                    style={{\n                        backgroundColor: '#C0C0C0', \n                        width: '2rem', \n                        height: '2rem',\n                        borderRadius: '0.25rem',\n                        cursor: 'pointer',\n                        textAlign: 'center'\n                    }}\n                    onClick={() => setOpen(!open)} \n                    aria-expanded={open}\n                >\n                    {open \n                        ? <b>-</b>\n                        : <b>+</b>\n                    }\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <div>\n                    <Card.Body>\n                        <div className=\"mb-3\">Interest rate: <b>{data.interestRate}%</b></div>\n                        <div className=\"mb-3\">To be paid back: <b>{data.ethPlusInterest} ETH</b></div>\n                        {data.state == LOAN_STATE.requested &&\n                            <div>\n                                <div>Proposed Loan Duration: </div>\n                                <div className=\"ml-4 mb-3\">\n                                    <div>Days: <b>{data.loanDuration.days}</b></div>\n                                    <div>Hours: <b>{data.loanDuration.hours}</b></div>\n                                    <div>Minutes: <b>{data.loanDuration.minutes}</b></div>\n                                </div>\n                            </div> \n                        }\n\n                        {data.state == LOAN_STATE.fulfilled &&\n                            <div>\n                                <div>Loan Expiration Date: </div>\n                                <div className=\"ml-4 mb-3\">\n                                    <div>Date: <b>{data.expirationDate}</b></div>\n                                    <div>Time: <b>{data.expirationTime}</b></div>\n                                </div>\n                            </div>\n                        }\n                    \n                        { children }\n                    </Card.Body>\n\n                </div>\n                \n            </Collapse>\n        </Card>\n    )\n}\n\nexport default LoanCard","/home/alec/swap-share/src/components/LoadingModal.js",[],"/home/alec/swap-share/src/components/GetMockDAI.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":40,"column":51,"nodeType":"101","messageId":"102","endLine":40,"endColumn":53},{"ruleId":"103","severity":1,"message":"104","line":76,"column":6,"nodeType":"105","endLine":76,"endColumn":12,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":33,"column":6,"nodeType":"105","endLine":33,"endColumn":8,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"100","line":32,"column":44,"nodeType":"101","messageId":"102","endLine":32,"endColumn":46},{"ruleId":"99","severity":1,"message":"100","line":33,"column":46,"nodeType":"101","messageId":"102","endLine":33,"endColumn":48},{"ruleId":"99","severity":1,"message":"100","line":34,"column":50,"nodeType":"101","messageId":"102","endLine":34,"endColumn":52},{"ruleId":"103","severity":1,"message":"109","line":29,"column":6,"nodeType":"105","endLine":29,"endColumn":15,"suggestions":"110"},{"ruleId":"103","severity":1,"message":"111","line":37,"column":6,"nodeType":"105","endLine":37,"endColumn":22,"suggestions":"112"},{"ruleId":"99","severity":1,"message":"100","line":40,"column":57,"nodeType":"101","messageId":"102","endLine":40,"endColumn":59},{"ruleId":"99","severity":1,"message":"100","line":46,"column":49,"nodeType":"101","messageId":"102","endLine":46,"endColumn":51},{"ruleId":"113","severity":1,"message":"114","line":57,"column":26,"nodeType":"115","messageId":"116","endLine":57,"endColumn":28},{"ruleId":"99","severity":1,"message":"100","line":73,"column":49,"nodeType":"101","messageId":"102","endLine":73,"endColumn":51},{"ruleId":"99","severity":1,"message":"100","line":74,"column":49,"nodeType":"101","messageId":"102","endLine":74,"endColumn":51},{"ruleId":"99","severity":1,"message":"100","line":81,"column":45,"nodeType":"101","messageId":"102","endLine":81,"endColumn":47},{"ruleId":"113","severity":1,"message":"114","line":95,"column":26,"nodeType":"115","messageId":"116","endLine":95,"endColumn":28},{"ruleId":"99","severity":1,"message":"100","line":111,"column":49,"nodeType":"101","messageId":"102","endLine":111,"endColumn":51},{"ruleId":"99","severity":1,"message":"100","line":112,"column":49,"nodeType":"101","messageId":"102","endLine":112,"endColumn":51},{"ruleId":"99","severity":1,"message":"100","line":119,"column":45,"nodeType":"101","messageId":"102","endLine":119,"endColumn":47},{"ruleId":"99","severity":1,"message":"100","line":224,"column":50,"nodeType":"101","messageId":"102","endLine":224,"endColumn":52},{"ruleId":"99","severity":1,"message":"100","line":225,"column":51,"nodeType":"101","messageId":"102","endLine":225,"endColumn":53},{"ruleId":"99","severity":1,"message":"100","line":228,"column":42,"nodeType":"101","messageId":"102","endLine":228,"endColumn":44},{"ruleId":"99","severity":1,"message":"100","line":231,"column":38,"nodeType":"101","messageId":"102","endLine":231,"endColumn":40},{"ruleId":"103","severity":1,"message":"117","line":18,"column":8,"nodeType":"105","endLine":18,"endColumn":17,"suggestions":"118"},{"ruleId":"113","severity":1,"message":"114","line":32,"column":30,"nodeType":"115","messageId":"116","endLine":32,"endColumn":32},{"ruleId":"99","severity":1,"message":"100","line":48,"column":53,"nodeType":"101","messageId":"102","endLine":48,"endColumn":55},{"ruleId":"99","severity":1,"message":"100","line":49,"column":53,"nodeType":"101","messageId":"102","endLine":49,"endColumn":55},{"ruleId":"99","severity":1,"message":"100","line":56,"column":49,"nodeType":"101","messageId":"102","endLine":56,"endColumn":51},{"ruleId":"99","severity":1,"message":"100","line":41,"column":37,"nodeType":"101","messageId":"102","endLine":41,"endColumn":39},{"ruleId":"99","severity":1,"message":"100","line":52,"column":37,"nodeType":"101","messageId":"102","endLine":52,"endColumn":39},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'networkID'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSwapShareContract' needs the current value of 'networkID'.","ArrayExpression",["121"],"React Hook useEffect has missing dependencies: 'NETWORK' and 'infuraId'. Either include them or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'getAddressBorrows', 'getAddressFulfilledLoans', and 'updateRequests'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has missing dependencies: 'getAddressBorrows' and 'getAddressFulfilledLoans'. Either include them or remove the dependency array.",["124"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getAllOpenLoans'. Either include it or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [networkID, web3]",{"range":"136","text":"137"},"Update the dependencies array to be: [NETWORK, infuraId]",{"range":"138","text":"139"},"Update the dependencies array to be: [account, getAddressBorrows, getAddressFulfilledLoans, updateRequests]",{"range":"140","text":"141"},"Update the dependencies array to be: [getAddressBorrows, getAddressFulfilledLoans, updateRequests]",{"range":"142","text":"143"},"Update the dependencies array to be: [account, getAllOpenLoans]",{"range":"144","text":"145"},[2138,2144],"[networkID, web3]",[896,898],"[NETWORK, infuraId]",[971,980],"[account, getAddressBorrows, getAddressFulfilledLoans, updateRequests]",[1130,1146],"[getAddressBorrows, getAddressFulfilledLoans, updateRequests]",[547,556],"[account, getAllOpenLoans]"]