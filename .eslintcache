[{"/home/alec/swap-share/src/index.js":"1","/home/alec/swap-share/src/App.js":"2","/home/alec/swap-share/src/reportWebVitals.js":"3","/home/alec/swap-share/src/components/WalletButton.js":"4","/home/alec/swap-share/src/hooks/useWeb3Modal.js":"5","/home/alec/swap-share/src/components/index.js":"6","/home/alec/swap-share/src/components/BorrowRequest.js":"7","/home/alec/swap-share/src/components/SwapShare.js":"8","/home/alec/swap-share/src/Constants.js":"9","/home/alec/swap-share/src/components/OpenLoans.js":"10","/home/alec/swap-share/src/components/SplashPage.js":"11"},{"size":571,"mtime":1609368651983,"results":"12","hashOfConfig":"13"},{"size":3056,"mtime":1609789751256,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1608155728010,"results":"15","hashOfConfig":"13"},{"size":402,"mtime":1608235219011,"results":"16","hashOfConfig":"13"},{"size":1552,"mtime":1609704829370,"results":"17","hashOfConfig":"13"},{"size":1367,"mtime":1609797084422,"results":"18","hashOfConfig":"13"},{"size":4262,"mtime":1609797185190,"results":"19","hashOfConfig":"13"},{"size":8278,"mtime":1609797106926,"results":"20","hashOfConfig":"13"},{"size":128,"mtime":1609622169288,"results":"21","hashOfConfig":"13"},{"size":3653,"mtime":1609796984853,"results":"22","hashOfConfig":"13"},{"size":367,"mtime":1609798371649,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1yv57jw",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alec/swap-share/src/index.js",[],["51","52"],"/home/alec/swap-share/src/App.js",["53"],"import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport SwapShareABI from './abis/SwapShare.json'\nimport TestnetDAI from './abis/TestnetDAI.json'\n\nimport './App.css'\n\nimport { Header } from './components'\nimport SplashPage from './components/SplashPage'\nimport WalletButton from './components/WalletButton'\nimport SwapShare from './components/SwapShare'\nimport OpenLoans from './components/OpenLoans'\n\nimport useWeb3Modal from './hooks/useWeb3Modal'\n\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null)\n  const [networkID, setNetworkID] = useState(null)\n  const [account, setAccount] = useState(null)\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal()\n\n  const [swapShareContract, setSwapShareContract] = useState(null)\n  const [DAIContract, setDAIContract] = useState(null)\n\n  useEffect(() => {\n    if (provider != null) {\n      window.ethereum.autoRefreshOnNetworkChange = false\n\n      setNetworkID(window.ethereum.networkVersion)\n      window.ethereum.request({method: 'eth_requestAccounts'}).then((accounts) => {\n        setAccount(accounts[0])\n      })\n      setWeb3(new Web3(provider))\n    }\n  }, [provider])\n\n\n  useEffect(() => {\n    if (web3 != null) {\n      setSwapShareContract(new web3.eth.Contract(\n        SwapShareABI.abi,\n        SwapShareABI.networks[networkID].address\n      ))\n\n      setDAIContract(new web3.eth.Contract(\n        TestnetDAI.abi,\n        TestnetDAI.networks[networkID].address\n      ))\n    }\n  }, [web3])\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header>\n          <div className=\"ml-4\">\n            {web3 && swapShareContract && account &&\n              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <div style={{minWidth: '10rem'}}>\n                  <Link style={{color: 'white'}} to='/'>Your Activity</Link>\n                </div>\n                <div style={{minWidth: '5rem'}}>\n                  <Link style={{color: 'white'}} to='/open-loans'>View Open Loans</Link>\n                </div>\n              </div>\n            }\n          </div> \n  \n          <div style={{display: 'flex', alignItems: 'center'}}>\n            <div className=\"mr-2\">{account}</div>\n            <WalletButton provider={provider} loadWeb3Modal={loadWeb3Modal} logoutOfWeb3Modal={logoutOfWeb3Modal} />\n          </div>\n        </Header>\n        <Switch>\n          <Route path='/open-loans'>\n            {web3 && swapShareContract && account\n              ? <OpenLoans web3={web3} account={account} swapShareContract={swapShareContract} />\n              : <SplashPage />\n            } \n          </Route>\n          <Route path='/'>\n            {web3 && swapShareContract && account\n              ? <SwapShare web3={web3} account={account} swapShareContract={swapShareContract} DAIContract={DAIContract} />\n              : <SplashPage />\n            }\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App\n","/home/alec/swap-share/src/reportWebVitals.js",[],"/home/alec/swap-share/src/components/WalletButton.js",[],"/home/alec/swap-share/src/hooks/useWeb3Modal.js",["54"],"import { useEffect, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"INVALID_INFURA_KEY\";\n\nconst NETWORK_NAME = \"mainnet\";\n\nfunction useWeb3Modal(config = {}) {\n  const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const { infuraId = INFURA_ID, NETWORK = NETWORK_NAME } = config;\n\n  useEffect(() => {\n    const modal = new Web3Modal({\n      network: NETWORK,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId,\n          },\n        },\n      },\n    })\n    setWeb3Modal(modal)\n  }, [])\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = async () => {\n    let newProvider = null;\n    try {\n      newProvider = await web3Modal.connect();\n    } catch (error) {\n      // Modal was closed by user, we dont have to do anything\n    }\n\n    if (newProvider) {\n      setProvider(newProvider)\n    }\n  }\n\n  // Disconnect from wallet\n  const logoutOfWeb3Modal = async () => {\n    if (window.web3.currentProvider && window.web3.currentProvider.close) {\n      await window.web3.currentProvider.close();\n    }\n    web3Modal.clearCachedProvider();\n    window.location.reload();\n    setProvider(null);\n  }\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","/home/alec/swap-share/src/components/index.js",[],"/home/alec/swap-share/src/components/BorrowRequest.js",[],"/home/alec/swap-share/src/components/SwapShare.js",["55","56","57","58","59","60","61","62","63"],"import React, { useEffect, useState } from 'react'\n\nimport { Body, Title } from './index'\nimport BorrowRequest from './BorrowRequest'\nimport { LOAN_STATE } from '../Constants'\n\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\n\nconst SwapShare = ({web3, account, swapShareContract, DAIContract}) => {\n  const [fulfilledLoans, setFulfilledLoans] = useState(null)\n  const [borrowTransactions, setBorrowTransactions] = useState(null)\n  const [updateRequests, setUpdateRequests] = useState(true)\n\n  useEffect(() => {\n    if (updateRequests) {\n      getAddressBorrows()\n      getAddressFulfilledLoans()\n      setUpdateRequests(false)\n    }\n  }, [updateRequests])\n\n  useEffect(() => {\n    if (borrowTransactions && borrowTransactions.length == 0) {\n      setBorrowTransactions(null)\n    }\n  }, [borrowTransactions])\n\n  useEffect(() => {\n    if (fulfilledLoans && fulfilledLoans.length == 0) {\n      setFulfilledLoans(null)\n    }\n  }, [fulfilledLoans])\n\n  function getAddressBorrows() {\n    swapShareContract.methods\n      .getAddressBorrows(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const now = new Date()\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': expiration.toDateString(),\n              'expirationTime': expiration.toLocaleTimeString(),\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': expiration < now\n            })\n          }\n        })\n        setBorrowTransactions(transactions)\n      })\n  }\n\n  function getAddressFulfilledLoans() {\n    swapShareContract.methods\n      .getAddressFulfilled(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const now = new Date()\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': expiration.toDateString(),\n              'expirationTime': expiration.toLocaleTimeString(),\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': expiration < now\n            })\n          }\n        })\n        setFulfilledLoans(transactions)\n      })\n  }\n\n\n  const cancelBorrowRequest = (index) => () => {\n    swapShareContract.methods\n        .cancelRequestedLoan(index)\n        .send({from: account})\n        .then(() => getAddressBorrows())\n  }  \n\n\n  const payBackLoan = (index, amount)  => () => {\n    const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n\n    swapShareContract.methods\n      .repayLoan(index)\n      .send({\n        from: account,\n        value: ethAmount\n      })\n      .then(() => getAddressBorrows())\n  }\n\n  const claimCollateral = (index) => () => {\n    swapShareContract.methods\n      .claimDefaultedLoan(index)\n      .send({\n        from: account\n      })\n      .then(() => getAddressFulfilledLoans())\n  }\n\n  return (\n    <div style={{display: 'flex', backgroundColor: '#282c34', justifyContent: 'space-between'}}>\n      <Body>\n        <div className=\"ml-4\">\n          <Title className=\"mb-4\">Loans You have Fulfilled</Title>\n          {fulfilledLoans\n            ? <div>\n                {fulfilledLoans.map((value, index) => (\n                  <Card className=\"mb-4\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                      <Card.Header>{value.ethAmount} ETH requested</Card.Header>\n                      <Card.Body>\n                          <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                          <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                          <Card.Text>Total to be paid back: {value.ethPlusInterest} ETH</Card.Text>\n                          <Card.Text>Loan will be paid in full by:</Card.Text>\n                          <Card.Text>\n                              Date: {value.expirationDate}<br />\n                              Time: {value.expirationTime}\n                          </Card.Text>\n                          <div>\n                            <Button \n                                variant={value.hasExpired ? 'success' : 'secondary'} \n                                disabled={!value.hasExpired}\n                                onClick={claimCollateral(value.index)}\n                            >\n                              {value.hasExpired ? 'claim collateral' : 'active'}\n                            </Button>\n                          </div>\n                      </Card.Body>\n                  </Card>\n                ))}\n              </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>Nothing to display</div>\n          }\n        </div>\n      </Body>\n      <Body>\n        <BorrowRequest \n          account={account} \n          swapShareContract={swapShareContract} \n          daiContract={DAIContract} \n          setUpdateRequests={setUpdateRequests} \n        />\n      </Body>\n      <Body>\n          <div className=\"mr-4\">\n            <Title className=\"mb-4\">Borrow Requests</Title>\n            {borrowTransactions\n              ? <div>\n                  {borrowTransactions.map((value, index) => (\n                    <Card className=\"mb-4\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                      <Card.Header>{value.ethAmount} ETH requested</Card.Header>\n                      <Card.Body>\n                        <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                        <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                        <Card.Text>Total to be paid back: {value.ethPlusInterest} ETH</Card.Text>\n                        <Card.Text>Loan will be paid in full by:</Card.Text>\n                        <Card.Text>\n                          Date: {value.expirationDate}<br />\n                          Time: {value.expirationTime}\n                        </Card.Text>\n                        <div>\n                          {!value.hasExpired && \n                            <Button \n                              variant={value.state == LOAN_STATE.requested ? 'danger' : 'success'} \n                              disabled={value.state == LOAN_STATE.fulfilled}\n                              onClick={cancelBorrowRequest(value.index)}\n                            >\n                              {value.state == LOAN_STATE.requested ? 'cancel request' : 'active'}\n                            </Button>\n                          }\n                          {value.state == LOAN_STATE.fulfilled &&\n                            <Button \n                              variant={value.hasExpired ? \"danger\" : \"primary\"} \n                              className=\"ml-2\"\n                              disabled={value.hasExpired}\n                              onClick={payBackLoan(value.index, value.ethPlusInterest)}\n                            >\n                              {value.hasExpired ? 'Loan has Defaulted' : 'Pay back loan'}\n                            </Button>\n                          }\n                        </div>\n                      </Card.Body>\n                    </Card>\n                  ))}\n                </div>\n              : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>Nothing to display</div>\n            }\n          </div>\n      </Body>\n    </div>\n  );\n}\n\nexport default SwapShare\n","/home/alec/swap-share/src/Constants.js",[],"/home/alec/swap-share/src/components/OpenLoans.js",["64","65"],"import React, { useEffect, useState } from 'react'\n\nimport { Splash, Title } from './index'\n\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\n\nconst OpenLoans = ({ web3, account, swapShareContract }) => {\n    const [openLoans, setOpenLoans] = useState(null)\n\n    useEffect(() => {\n        getAllOpenLoans()\n    }, [])\n\n    useEffect(() => {\n        if (openLoans && openLoans.length === 0) {\n            setOpenLoans(null)\n        }\n    }, [openLoans])\n\n    const getAllOpenLoans = () => {\n        swapShareContract.methods\n          .getAllRequests(account)\n          .call()\n          .then(result => {\n            let transactions = [];\n            result.map(value => {\n              if (value['valid']) {\n                const expiration = new Date(parseInt(value['expiration']) * 1000)\n                \n                transactions.push({\n                  'index': value['index'],\n                  'expirationDate': expiration.toDateString(),\n                  'expirationTime': expiration.toLocaleTimeString(),\n                  'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n                  'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n                  'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n                  'interestRate': value['interestRate'],\n                  'state': value['state']\n                })\n              }\n            })\n            setOpenLoans(transactions)\n          })\n      }\n\n      const fulfillLoan = (index, amount) => () => {\n        const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n    \n        swapShareContract.methods\n          .fulfillLoan(index)\n          .send({\n            from: account,\n            value: ethAmount\n          })\n          .then(() => getAllOpenLoans())\n      }\n\n    return (\n        <Splash>\n            <div className=\"mr-4\">\n                <Title className=\"mb-4\">Open Loan Requests</Title>\n                {openLoans\n                    ? <div>\n                        {openLoans.map((value, index) => (\n                            <Card className=\"mb-4\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                                <Card.Header>{value.ethAmount} ETH requested</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                                    <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                                    <Card.Text>Total to be paid back: {value.ethPlusInterest} ETH</Card.Text>\n                                    <Card.Text>Loan will be paid in full by:</Card.Text>\n                                    <Card.Text>\n                                        Date: {value.expirationDate}<br />\n                                        Time: {value.expirationTime}\n                                    </Card.Text>\n                                    <Button variant='success' onClick={fulfillLoan(value.index, value.ethAmount)}>\n                                        fulfill loan\n                                    </Button>\n                                </Card.Body>\n                            </Card>\n                        ))}\n                        </div>\n                    : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>\n                        No loans to display at this time\n                        </div>\n                }\n            </div>\n        </Splash>\n    )\n  }\n\nexport default OpenLoans","/home/alec/swap-share/src/components/SplashPage.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":58,"column":6,"nodeType":"72","endLine":58,"endColumn":12,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":30,"column":6,"nodeType":"72","endLine":30,"endColumn":8,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"76","line":22,"column":6,"nodeType":"72","endLine":22,"endColumn":22,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":25,"column":57,"nodeType":"80","messageId":"81","endLine":25,"endColumn":59},{"ruleId":"78","severity":1,"message":"79","line":31,"column":49,"nodeType":"80","messageId":"81","endLine":31,"endColumn":51},{"ruleId":"82","severity":1,"message":"83","line":42,"column":26,"nodeType":"84","messageId":"85","endLine":42,"endColumn":28},{"ruleId":"82","severity":1,"message":"83","line":70,"column":26,"nodeType":"84","messageId":"85","endLine":70,"endColumn":28},{"ruleId":"78","severity":1,"message":"79","line":186,"column":52,"nodeType":"80","messageId":"81","endLine":186,"endColumn":54},{"ruleId":"78","severity":1,"message":"79","line":187,"column":53,"nodeType":"80","messageId":"81","endLine":187,"endColumn":55},{"ruleId":"78","severity":1,"message":"79","line":190,"column":44,"nodeType":"80","messageId":"81","endLine":190,"endColumn":46},{"ruleId":"78","severity":1,"message":"79","line":193,"column":40,"nodeType":"80","messageId":"81","endLine":193,"endColumn":42},{"ruleId":"70","severity":1,"message":"86","line":13,"column":8,"nodeType":"72","endLine":13,"endColumn":10,"suggestions":"87"},{"ruleId":"82","severity":1,"message":"83","line":27,"column":30,"nodeType":"84","messageId":"85","endLine":27,"endColumn":32},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'networkID'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSwapShareContract' needs the current value of 'networkID'.","ArrayExpression",["90"],"React Hook useEffect has missing dependencies: 'NETWORK' and 'infuraId'. Either include them or remove the dependency array.",["91"],"React Hook useEffect has missing dependencies: 'getAddressBorrows' and 'getAddressFulfilledLoans'. Either include them or remove the dependency array.",["92"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getAllOpenLoans'. Either include it or remove the dependency array.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [networkID, web3]",{"range":"102","text":"103"},"Update the dependencies array to be: [NETWORK, infuraId]",{"range":"104","text":"105"},"Update the dependencies array to be: [getAddressBorrows, getAddressFulfilledLoans, updateRequests]",{"range":"106","text":"107"},"Update the dependencies array to be: [getAllOpenLoans]",{"range":"108","text":"109"},[1575,1581],"[networkID, web3]",[850,852],"[NETWORK, infuraId]",[675,691],"[getAddressBorrows, getAddressFulfilledLoans, updateRequests]",[349,351],"[getAllOpenLoans]"]