[{"/home/alec/swap-share/src/index.js":"1","/home/alec/swap-share/src/App.js":"2","/home/alec/swap-share/src/reportWebVitals.js":"3","/home/alec/swap-share/src/components/WalletButton.js":"4","/home/alec/swap-share/src/hooks/useWeb3Modal.js":"5","/home/alec/swap-share/src/components/index.js":"6","/home/alec/swap-share/src/components/BorrowRequest.js":"7","/home/alec/swap-share/src/components/SwapShare.js":"8","/home/alec/swap-share/src/Constants.js":"9"},{"size":571,"mtime":1609368651983,"results":"10","hashOfConfig":"11"},{"size":2815,"mtime":1609705919182,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608155728010,"results":"13","hashOfConfig":"11"},{"size":402,"mtime":1608235219011,"results":"14","hashOfConfig":"11"},{"size":1552,"mtime":1609704829370,"results":"15","hashOfConfig":"11"},{"size":1251,"mtime":1609705855435,"results":"16","hashOfConfig":"11"},{"size":4231,"mtime":1609621098815,"results":"17","hashOfConfig":"11"},{"size":10426,"mtime":1609699386165,"results":"18","hashOfConfig":"11"},{"size":128,"mtime":1609622169288,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1yv57jw",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/alec/swap-share/src/index.js",[],["42","43"],"/home/alec/swap-share/src/App.js",["44","45"],"/home/alec/swap-share/src/reportWebVitals.js",[],"/home/alec/swap-share/src/components/WalletButton.js",[],"/home/alec/swap-share/src/hooks/useWeb3Modal.js",["46"],"import { useEffect, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"INVALID_INFURA_KEY\";\n\nconst NETWORK_NAME = \"mainnet\";\n\nfunction useWeb3Modal(config = {}) {\n  const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const { infuraId = INFURA_ID, NETWORK = NETWORK_NAME } = config;\n\n  useEffect(() => {\n    const modal = new Web3Modal({\n      network: NETWORK,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId,\n          },\n        },\n      },\n    })\n    setWeb3Modal(modal)\n  }, [])\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = async () => {\n    let newProvider = null;\n    try {\n      newProvider = await web3Modal.connect();\n    } catch (error) {\n      // Modal was closed by user, we dont have to do anything\n    }\n\n    if (newProvider) {\n      setProvider(newProvider)\n    }\n  }\n\n  // Disconnect from wallet\n  const logoutOfWeb3Modal = async () => {\n    if (window.web3.currentProvider && window.web3.currentProvider.close) {\n      await window.web3.currentProvider.close();\n    }\n    web3Modal.clearCachedProvider();\n    window.location.reload();\n    setProvider(null);\n  }\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","/home/alec/swap-share/src/components/index.js",[],"/home/alec/swap-share/src/components/BorrowRequest.js",["47"],"import React, { useState } from 'react'\nimport Flatpickr from \"react-flatpickr\"\nimport BigNumber from \"bignumber.js\"\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst BorrowRequest = ({ account, swapShareContract, daiContract, setUpdateRequests }) => {\n    const [validated, setValidated] = useState(false)\n    const [approved, setApproved] = useState(false)\n    const approvalAmount = new BigNumber('1000e+18').toFixed()\n\n    const [daiAmount, setDaiAmount] = useState('')\n    const [ethAmount, setEthAmount] = useState('')\n    const [expirationDate, setExpirationDate] = useState(null)\n    const [interestRate, setInterestRate] = useState('')\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.stopPropagation();\n        } else {\n            setValidated(true);\n            submitBorrowRequest()\n        }\n\n        event.preventDefault()\n      };\n\n    const handleChange = setFunc => e => {\n        setFunc(e.target.value)\n    }\n\n    function submitBorrowRequest() {\n        let amountToSend = new BigNumber(`${daiAmount}e+18`).toString()\n        let ethRequested = new BigNumber(`${ethAmount}e+18`).toString()\n\n        if (approved) {\n            sendDAI(expirationDate, amountToSend, ethRequested, interestRate)\n        } else {\n            daiContract.methods\n            .approve(swapShareContract._address, approvalAmount)\n            .send({from: account})\n            .then(() => {\n                setApproved(true)\n                sendDAI(expirationDate, amountToSend, ethRequested, interestRate)\n            })\n            .catch(e => console.error(e))\n        }\n    }\n\n    function sendDAI(expiration, amount, ethRequested, interestRate) {\n        swapShareContract.methods\n            .requestLoan(expiration, amount, ethRequested, interestRate)\n            .send({from: account})\n            .then(() => setUpdateRequests(true))\n    }\n\n    return (\n        <Form noValidate validated={validated} onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column'}}>\n            <Form.Label>Create a Borrow Request</Form.Label>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">ETH to request</Form.Text>\n                <Form.Control placeholder=\"ETH amount\" value={ethAmount} onChange={handleChange(setEthAmount)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify ETH.\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">DAI to store as collateral</Form.Text>\n                <Form.Control placeholder=\"DAI amount\" value={daiAmount} onChange={handleChange(setDaiAmount)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify DAI.\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">Interest rate that you will borrow at</Form.Text>\n                <Form.Control placeholder=\"Interest rate\" value={interestRate} onChange={handleChange(setInterestRate)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify an interest rate\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">Date and time that loan must be paid by</Form.Text>\n                <Flatpickr className=\"mt-2\"\n                    options={{ \n                        minDate: \"2017-01-01\",\n                        enableTime: true,\n                        dateFormat: \"M d, Y  h:i K\",\n                        defaultDate: \"today\",\n                        minDate: \"today\" \n                    }}\n                    onChange={date => {\n                        let utcTimestamp = date[0].getTime() / 1000\n                        setExpirationDate(utcTimestamp)\n                    }}\n                />\n            </Form.Group>\n\n            <Button className=\"mt-2\" variant=\"light\" type=\"submit\">Submit</Button>\n        </Form>\n    );\n  }\n\nexport default BorrowRequest","/home/alec/swap-share/src/components/SwapShare.js",["48","49","50","51","52","53","54","55","56","57","58"],"import React, { useEffect, useState } from 'react'\n\nimport { Body } from './index'\nimport BorrowRequest from './BorrowRequest'\nimport { LOAN_STATE } from '../Constants'\n\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\n\nconst SwapShare = ({web3, account, swapShareContract, DAIContract}) => {\n  const [fulfilledLoans, setFulfilledLoans] = useState(null)\n  const [allRequests, setAllRequests] = useState(null)\n  const [borrowTransactions, setBorrowTransactions] = useState(null)\n  const [updateRequests, setUpdateRequests] = useState(true)\n\n  useEffect(() => {\n    if (updateRequests) {\n      getAddressBorrows()\n      getAllRequests()\n      getAddressFulfilledLoans()\n      setUpdateRequests(false)\n    }\n  }, [updateRequests])\n\n  useEffect(() => {\n    if (borrowTransactions && borrowTransactions.length == 0) {\n      setBorrowTransactions(null)\n    }\n  }, [borrowTransactions])\n\n  useEffect(() => {\n    if (allRequests && allRequests.length == 0) {\n      setAllRequests(null)\n    }\n  }, [allRequests])\n\n  useEffect(() => {\n    if (fulfilledLoans && fulfilledLoans.length == 0) {\n      setFulfilledLoans(null)\n    }\n  }, [fulfilledLoans])\n\n  function getAllRequests() {\n    swapShareContract.methods\n      .getAllRequests(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            \n            transactions.push({\n              'index': value['index'],\n              'expirationDate': expiration.toDateString(),\n              'expirationTime': expiration.toLocaleTimeString(),\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state']\n            })\n          }\n        })\n        setAllRequests(transactions)\n      })\n  }\n\n  function getAddressBorrows() {\n    swapShareContract.methods\n      .getAddressBorrows(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const now = new Date()\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': expiration.toDateString(),\n              'expirationTime': expiration.toLocaleTimeString(),\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': expiration < now\n            })\n          }\n        })\n        setBorrowTransactions(transactions)\n      })\n  }\n\n  function getAddressFulfilledLoans() {\n    swapShareContract.methods\n      .getAddressFulfilled(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const now = new Date()\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': expiration.toDateString(),\n              'expirationTime': expiration.toLocaleTimeString(),\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': expiration < now\n            })\n          }\n        })\n        setFulfilledLoans(transactions)\n      })\n  }\n\n\n  const cancelBorrowRequest = (index) => () => {\n    swapShareContract.methods\n        .cancelRequestedLoan(index)\n        .send({from: account})\n        .then(() => getAddressBorrows())\n  }  \n\n  const fulfillLoan = (index, amount) => () => {\n    const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n\n    swapShareContract.methods\n      .fulfillLoan(index)\n      .send({\n        from: account,\n        value: ethAmount\n      })\n      .then(() => {\n        getAllRequests()\n        getAddressFulfilledLoans()\n      })\n  }\n\n  const payBackLoan = (index, amount)  => () => {\n    const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n\n    swapShareContract.methods\n      .repayLoan(index)\n      .send({\n        from: account,\n        value: ethAmount\n      })\n      .then(() => getAddressBorrows())\n  }\n\n  const claimCollateral = (index) => () => {\n    swapShareContract.methods\n      .claimDefaultedLoan(index)\n      .send({\n        from: account\n      })\n      .then(() => getAddressFulfilledLoans())\n  }\n\n  return (\n    <div style={{display: 'flex', backgroundColor: '#282c34', justifyContent: 'space-between'}}>\n      <Body>\n        {allRequests &&\n          <div className=\"mr-4\">\n            <div className=\"mb-4\">Open Loan Requests</div>\n            {allRequests.map((value, index) => (\n                <Card className=\"mb-3\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                    <Card.Header>{value.ethAmount} ETH requested</Card.Header>\n                    <Card.Body>\n                        <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                        <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                        <Card.Text>Total to be paid back: {value.ethPlusInterest} ETH</Card.Text>\n                        <Card.Text>Loan will be paid in full by:</Card.Text>\n                        <Card.Text>\n                            Date: {value.expirationDate}<br />\n                            Time: {value.expirationTime}\n                        </Card.Text>\n                        <Button variant='success' onClick={fulfillLoan(value.index, value.ethAmount)}>\n                          fulfill loan\n                        </Button>\n                    </Card.Body>\n                </Card>\n            ))}\n            </div>\n        }\n      </Body>\n      <Body>\n        <BorrowRequest \n          account={account} \n          swapShareContract={swapShareContract} \n          daiContract={DAIContract} \n          setUpdateRequests={setUpdateRequests} \n        />\n        {fulfilledLoans && \n          <div className=\"ml-4 mt-4\">\n            <div className=\"mb-4\">Loans You have Fulfilled</div>\n            {fulfilledLoans.map((value, index) => (\n              <Card className=\"mb-3\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                  <Card.Header>{value.ethAmount} ETH requested</Card.Header>\n                  <Card.Body>\n                      <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                      <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                      <Card.Text>Total to be paid back: {value.ethPlusInterest} ETH</Card.Text>\n                      <Card.Text>Loan will be paid in full by:</Card.Text>\n                      <Card.Text>\n                          Date: {value.expirationDate}<br />\n                          Time: {value.expirationTime}\n                      </Card.Text>\n                      <div>\n                        <Button \n                            variant={value.hasExpired ? 'success' : 'secondary'} \n                            disabled={!value.hasExpired}\n                            onClick={claimCollateral(value.index)}\n                        >\n                          {value.hasExpired ? 'claim collateral' : 'active'}\n                        </Button>\n                      </div>\n                  </Card.Body>\n              </Card>\n            ))}\n          </div>\n        }\n      </Body>\n      <Body>\n        {borrowTransactions &&\n          <div className=\"ml-4\">\n            <div className=\"mb-4\">Borrow Requests</div>\n            {borrowTransactions.map((value, index) => (\n                <Card className=\"mb-3\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                    <Card.Header>{value.ethAmount} ETH requested</Card.Header>\n                    <Card.Body>\n                        <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                        <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                        <Card.Text>Total to be paid back: {value.ethPlusInterest} ETH</Card.Text>\n                        <Card.Text>Loan will be paid in full by:</Card.Text>\n                        <Card.Text>\n                            Date: {value.expirationDate}<br />\n                            Time: {value.expirationTime}\n                        </Card.Text>\n                        <div>\n                          {!value.hasExpired && \n                            <Button \n                              variant={value.state == LOAN_STATE.requested ? 'danger' : 'success'} \n                              disabled={value.state == LOAN_STATE.fulfilled}\n                              onClick={cancelBorrowRequest(value.index)}\n                            >\n                              {value.state == LOAN_STATE.requested ? 'cancel request' : 'active'}\n                            </Button>\n                          }\n                          {value.state == LOAN_STATE.fulfilled &&\n                            <Button \n                              variant={value.hasExpired ? \"danger\" : \"primary\"} \n                              className=\"ml-2\"\n                              disabled={value.hasExpired}\n                              onClick={payBackLoan(value.index, value.ethPlusInterest)}\n                            >\n                              {value.hasExpired ? 'Loan has Defaulted' : 'Pay back loan'}\n                            </Button>\n                          }\n                        </div>\n                    </Card.Body>\n                </Card>\n            ))}\n          </div>\n        }\n      </Body>\n    </div>\n  );\n}\n\nexport default SwapShare\n","/home/alec/swap-share/src/Constants.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":5,"column":3,"nodeType":"65","messageId":"66","endLine":5,"endColumn":9},{"ruleId":"67","severity":1,"message":"68","line":57,"column":6,"nodeType":"69","endLine":57,"endColumn":12,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":30,"column":6,"nodeType":"69","endLine":30,"endColumn":8,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":96,"column":25,"nodeType":"75","messageId":"76","endLine":96,"endColumn":32},{"ruleId":"67","severity":1,"message":"77","line":24,"column":6,"nodeType":"69","endLine":24,"endColumn":22,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":27,"column":57,"nodeType":"81","messageId":"76","endLine":27,"endColumn":59},{"ruleId":"79","severity":1,"message":"80","line":33,"column":43,"nodeType":"81","messageId":"76","endLine":33,"endColumn":45},{"ruleId":"79","severity":1,"message":"80","line":39,"column":49,"nodeType":"81","messageId":"76","endLine":39,"endColumn":51},{"ruleId":"82","severity":1,"message":"83","line":50,"column":26,"nodeType":"84","messageId":"85","endLine":50,"endColumn":28},{"ruleId":"82","severity":1,"message":"83","line":76,"column":26,"nodeType":"84","messageId":"85","endLine":76,"endColumn":28},{"ruleId":"82","severity":1,"message":"83","line":104,"column":26,"nodeType":"84","messageId":"85","endLine":104,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":253,"column":52,"nodeType":"81","messageId":"76","endLine":253,"endColumn":54},{"ruleId":"79","severity":1,"message":"80","line":254,"column":53,"nodeType":"81","messageId":"76","endLine":254,"endColumn":55},{"ruleId":"79","severity":1,"message":"80","line":257,"column":44,"nodeType":"81","messageId":"76","endLine":257,"endColumn":46},{"ruleId":"79","severity":1,"message":"80","line":260,"column":40,"nodeType":"81","messageId":"76","endLine":260,"endColumn":42},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'networkID'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSwapShareContract' needs the current value of 'networkID'.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'NETWORK' and 'infuraId'. Either include them or remove the dependency array.",["89"],"no-dupe-keys","Duplicate key 'minDate'.","ObjectExpression","unexpected","React Hook useEffect has missing dependencies: 'getAddressBorrows', 'getAddressFulfilledLoans', and 'getAllRequests'. Either include them or remove the dependency array.",["90"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [networkID, web3]",{"range":"97","text":"98"},"Update the dependencies array to be: [NETWORK, infuraId]",{"range":"99","text":"100"},"Update the dependencies array to be: [getAddressBorrows, getAddressFulfilledLoans, getAllRequests, updateRequests]",{"range":"101","text":"102"},[1517,1523],"[networkID, web3]",[850,852],"[NETWORK, infuraId]",[746,762],"[getAddressBorrows, getAddressFulfilledLoans, getAllRequests, updateRequests]"]