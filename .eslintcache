[{"/home/alec/swap-share/src/index.js":"1","/home/alec/swap-share/src/App.js":"2","/home/alec/swap-share/src/reportWebVitals.js":"3","/home/alec/swap-share/src/components/WalletButton.js":"4","/home/alec/swap-share/src/components/Escrow.js":"5","/home/alec/swap-share/src/hooks/useWeb3Modal.js":"6","/home/alec/swap-share/src/components/index.js":"7","/home/alec/swap-share/src/components/BorrowRequest.js":"8"},{"size":571,"mtime":1609368651983,"results":"9","hashOfConfig":"10"},{"size":2078,"mtime":1609535211109,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608155728010,"results":"12","hashOfConfig":"10"},{"size":402,"mtime":1608235219011,"results":"13","hashOfConfig":"10"},{"size":6658,"mtime":1609545478278,"results":"14","hashOfConfig":"10"},{"size":1420,"mtime":1608789385191,"results":"15","hashOfConfig":"10"},{"size":1246,"mtime":1609535193629,"results":"16","hashOfConfig":"10"},{"size":4236,"mtime":1609535066238,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1yv57jw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/home/alec/swap-share/src/index.js",[],["38","39"],"/home/alec/swap-share/src/App.js",["40"],"import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nimport EscrowABI from './abis/Escrow.json'\nimport TestnetDAI from './abis/TestnetDAI.json'\n\nimport './App.css'\nimport logo from './logo.svg'\n\nimport { Header, Splash } from './components'\nimport WalletButton from './components/WalletButton'\nimport Escrow from './components/Escrow'\n\nimport useWeb3Modal from './hooks/useWeb3Modal'\n\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null)\n  const [networkID, setNetworkID] = useState(null)\n  const [account, setAccount] = useState(null)\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal()\n\n  const [escrowContract, setEscrowContract] = useState(null)\n  const [DAIContract, setDAIContract] = useState(null)\n\n  useEffect(() => {\n    if (provider != null) {\n      window.ethereum.autoRefreshOnNetworkChange = false\n\n      setNetworkID(window.ethereum.networkVersion)\n      window.ethereum.request({method: 'eth_requestAccounts'}).then((accounts) => {\n        setAccount(accounts[0])\n      })\n      setWeb3(new Web3(provider))\n    }\n  }, [provider])\n\n\n  useEffect(() => {\n    if (web3 != null) {\n      setEscrowContract(new web3.eth.Contract(\n        EscrowABI.abi,\n        EscrowABI.networks[networkID].address\n      ))\n\n      setDAIContract(new web3.eth.Contract(\n        TestnetDAI.abi,\n        TestnetDAI.networks[networkID].address\n      ))\n    }\n  }, [web3])\n\n\n  return (\n    <div className=\"App\">\n      <Header>\n        <div className=\"mr-2\">{account}</div>\n        <WalletButton provider={provider} loadWeb3Modal={loadWeb3Modal} logoutOfWeb3Modal={logoutOfWeb3Modal} />\n      </Header>\n      {web3 && escrowContract && account\n        ? <Escrow web3={web3} account={account} escrowContract={escrowContract} DAIContract={DAIContract} />\n        : <Splash>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <div style={{fontSize: '2rem'}}>SwapShare</div>\n            <div>An anonymous, direct peer-to-peer crypto lending service</div>\n          </Splash>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","/home/alec/swap-share/src/reportWebVitals.js",[],"/home/alec/swap-share/src/components/WalletButton.js",[],"/home/alec/swap-share/src/components/Escrow.js",["41","42","43","44","45","46","47"],"import React, { useEffect, useState } from 'react'\n\n\nimport { Body } from './index'\nimport BorrowRequest from './BorrowRequest'\n\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\n\nconst Escrow = ({web3, account, escrowContract, DAIContract}) => {\n  const [fulfilledLoans, setFulfilledLoans] = useState(null)\n  const [allRequests, setAllRequests] = useState(null)\n  const [borrowTransactions, setBorrowTransactions] = useState(null)\n  const [updateRequests, setUpdateRequests] = useState(true)\n\n  useEffect(() => {\n    if (updateRequests) {\n      getBorrowTransactions()\n      getAllBorrowRequests()\n      setUpdateRequests(false)\n    }\n  }, [updateRequests])\n\n  useEffect(() => {\n    if (borrowTransactions && borrowTransactions.length == 0) {\n      setBorrowTransactions(null)\n    }\n  }, [borrowTransactions])\n\n  useEffect(() => {\n    if (allRequests && allRequests.length == 0) {\n      setAllRequests(null)\n    }\n  }, [allRequests])\n\n  function getAllBorrowRequests() {\n    escrowContract.methods\n      .getAllBorrowRequests(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            transactions.push({\n                'index': value['index'],\n                'expirationDate': expiration.toDateString(),\n                'expirationTime': expiration.toLocaleTimeString(),\n                'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n                'ethRequested': web3.utils.fromWei(value['ethRequested'], 'ether'),\n                'interestRate': value['interestRate'],\n                'fulfilled': value['fulfilled']\n            })\n          }\n        })\n        setAllRequests(transactions)\n      })\n  }\n\n  function getBorrowTransactions() {\n    escrowContract.methods\n      .getAddressBorrowRequests(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            transactions.push({\n                'index': value['index'],\n                'expirationDate': expiration.toDateString(),\n                'expirationTime': expiration.toLocaleTimeString(),\n                'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n                'ethRequested': web3.utils.fromWei(value['ethRequested'], 'ether'),\n                'interestRate': value['interestRate'],\n                'fulfilled': value['fulfilled']\n            })\n          }\n        })\n        setBorrowTransactions(transactions)\n      })\n  }\n\n\n  const cancelBorrowRequest = (index) => () => {\n    escrowContract.methods\n        .refundCollateralDeposit(index)\n        .send({from: account})\n        .then(() => getBorrowTransactions())\n  }  \n\n  const fulfillLoan = (index, amount) => () => {\n    const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n\n    escrowContract.methods\n      .fulfillLoan(index)\n      .send({\n        from: account,\n        value: ethAmount\n      })\n      .then(() => getAllBorrowRequests())\n  }\n\n  return (\n    <div style={{display: 'flex', backgroundColor: '#282c34', justifyContent: 'space-between'}}>\n      <Body>\n        {allRequests &&\n          <div className=\"mr-4\">\n            <div className=\"mb-4\">Open Loan Requests</div>\n            {allRequests.map((value, index) => (\n                <Card className=\"mb-3\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                    <Card.Header>{value.ethRequested} ETH requested</Card.Header>\n                    <Card.Body>\n                        <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                        <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                        <Card.Text>Total to be paid back: {\n                          (Number(value.ethRequested) * (Number(value.interestRate) / 100)) + Number(value.ethRequested)\n                        } ETH</Card.Text>\n                        <Card.Text>Loan will be paid in full by:</Card.Text>\n                        <Card.Text>\n                            Date: {value.expirationDate}<br />\n                            Time: {value.expirationTime}\n                        </Card.Text>\n                        <Button variant='success' onClick={fulfillLoan(value.index, value.ethRequested)}>\n                          fulfill loan\n                        </Button>\n                    </Card.Body>\n                </Card>\n            ))}\n            </div>\n        }\n      </Body>\n      <Body>\n        <BorrowRequest \n          account={account} \n          escrowContract={escrowContract} \n          daiContract={DAIContract} \n          setUpdateRequests={setUpdateRequests} \n        />\n      </Body>\n      <Body>\n        {borrowTransactions &&\n          <div className=\"ml-4\">\n            <div className=\"mb-4\">Borrow Requests</div>\n            {borrowTransactions.map((value, index) => (\n                <Card className=\"mb-3\" style={{color: '#282c34', minWidth: '20rem'}} key={index}>\n                    <Card.Header>{value.ethRequested} ETH requested</Card.Header>\n                    <Card.Body>\n                        <Card.Title>Posted collateral: {value.daiAmount} DAI</Card.Title>\n                        <Card.Text>Offered interest rate: {value.interestRate}%</Card.Text>\n                        <Card.Text>Total to be paid back: {\n                          (Number(value.ethRequested) * (Number(value.interestRate) / 100)) + Number(value.ethRequested)\n                        } ETH</Card.Text>\n                        <Card.Text>Loan will be paid in full by:</Card.Text>\n                        <Card.Text>\n                            Date: {value.expirationDate}<br />\n                            Time: {value.expirationTime}\n                        </Card.Text>\n                        <div>\n                          <Button \n                              variant={value.fulfilled ? 'success' : 'danger'} \n                              disabled={value.fulfilled}\n                              onClick={cancelBorrowRequest(value.index)}\n                          >\n                            {value.fulfilled ? 'active' : 'cancel request'}\n                          </Button>\n                          <Button className=\"ml-2\" variant=\"primary\">Pay back loan</Button>\n                        </div>\n                    </Card.Body>\n                </Card>\n            ))}\n            </div>\n        }\n      </Body>\n    </div>\n  );\n}\n\nexport default Escrow\n","/home/alec/swap-share/src/hooks/useWeb3Modal.js",[],"/home/alec/swap-share/src/components/index.js",[],"/home/alec/swap-share/src/components/BorrowRequest.js",["48"],"import React, { useState } from 'react'\nimport Flatpickr from \"react-flatpickr\"\nimport BigNumber from \"bignumber.js\"\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst BorrowRequest = ({ account, escrowContract, daiContract, setUpdateRequests }) => {\n    const [validated, setValidated] = useState(false)\n    const [approved, setApproved] = useState(false)\n    const approvalAmount = new BigNumber('1000e+18').toFixed()\n\n    const [daiAmount, setDaiAmount] = useState('')\n    const [ethAmount, setEthAmount] = useState('')\n    const [expirationDate, setExpirationDate] = useState(null)\n    const [interestRate, setInterestRate] = useState('')\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.stopPropagation();\n        } else {\n            setValidated(true);\n            submitBorrowRequest()\n        }\n\n        event.preventDefault()\n      };\n\n    const handleChange = setFunc => e => {\n        setFunc(e.target.value)\n    }\n\n    function submitBorrowRequest() {\n        let amountToSend = new BigNumber(`${daiAmount}e+18`).toString()\n        let ethRequested = new BigNumber(`${ethAmount}e+18`).toString()\n\n        if (approved) {\n            sendDAI(expirationDate, amountToSend, ethRequested, interestRate)\n        } else {\n            daiContract.methods\n            .approve(escrowContract._address, approvalAmount)\n            .send({from: account})\n            .then(() => {\n                setApproved(true)\n                sendDAI(expirationDate, amountToSend, ethRequested, interestRate)\n            })\n            .catch(e => console.error(e))\n        }\n    }\n\n    function sendDAI(expiration, amount, ethRequested, interestRate) {\n        escrowContract.methods\n            .borrowerCollateralDeposit(expiration, amount, ethRequested, interestRate)\n            .send({from: account})\n            .then(() => setUpdateRequests(true))\n    }\n\n    return (\n        <Form noValidate validated={validated} onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column'}}>\n            <Form.Label>Create a Borrow Request</Form.Label>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">ETH to request</Form.Text>\n                <Form.Control placeholder=\"ETH amount\" value={ethAmount} onChange={handleChange(setEthAmount)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify ETH.\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">DAI to store as collateral</Form.Text>\n                <Form.Control placeholder=\"DAI amount\" value={daiAmount} onChange={handleChange(setDaiAmount)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify DAI.\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">Interest rate that you will borrow at</Form.Text>\n                <Form.Control placeholder=\"Interest rate\" value={interestRate} onChange={handleChange(setInterestRate)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify an interest rate\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">Date and time that loan must be paid by</Form.Text>\n                <Flatpickr className=\"mt-2\"\n                    options={{ \n                        minDate: \"2017-01-01\",\n                        enableTime: true,\n                        dateFormat: \"M d, Y  h:i K\",\n                        defaultDate: \"today\",\n                        minDate: \"today\" \n                    }}\n                    onChange={date => {\n                        let utcTimestamp = date[0].getTime() / 1000\n                        setExpirationDate(utcTimestamp)\n                    }}\n                />\n            </Form.Group>\n\n            <Button className=\"mt-2\" variant=\"light\" type=\"submit\">Submit</Button>\n        </Form>\n    );\n  }\n\nexport default BorrowRequest",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":51,"column":6,"nodeType":"55","endLine":51,"endColumn":12,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":12,"column":10,"nodeType":"59","messageId":"60","endLine":12,"endColumn":24},{"ruleId":"57","severity":1,"message":"61","line":12,"column":26,"nodeType":"59","messageId":"60","endLine":12,"endColumn":43},{"ruleId":"53","severity":1,"message":"62","line":23,"column":6,"nodeType":"55","endLine":23,"endColumn":22,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":26,"column":57,"nodeType":"66","messageId":"67","endLine":26,"endColumn":59},{"ruleId":"64","severity":1,"message":"65","line":32,"column":43,"nodeType":"66","messageId":"67","endLine":32,"endColumn":45},{"ruleId":"68","severity":1,"message":"69","line":43,"column":26,"nodeType":"70","messageId":"71","endLine":43,"endColumn":28},{"ruleId":"68","severity":1,"message":"69","line":67,"column":26,"nodeType":"70","messageId":"71","endLine":67,"endColumn":28},{"ruleId":"72","severity":1,"message":"73","line":96,"column":25,"nodeType":"74","messageId":"67","endLine":96,"endColumn":32},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'networkID'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setEscrowContract' needs the current value of 'networkID'.","ArrayExpression",["77"],"no-unused-vars","'fulfilledLoans' is assigned a value but never used.","Identifier","unusedVar","'setFulfilledLoans' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllBorrowRequests' and 'getBorrowTransactions'. Either include them or remove the dependency array.",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'minDate'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [networkID, web3]",{"range":"83","text":"84"},"Update the dependencies array to be: [getAllBorrowRequests, getBorrowTransactions, updateRequests]",{"range":"85","text":"86"},[1402,1408],"[networkID, web3]",[676,692],"[getAllBorrowRequests, getBorrowTransactions, updateRequests]"]