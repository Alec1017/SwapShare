[{"/home/alec/swap-share/src/index.js":"1","/home/alec/swap-share/src/App.js":"2","/home/alec/swap-share/src/reportWebVitals.js":"3","/home/alec/swap-share/src/components/WalletButton.js":"4","/home/alec/swap-share/src/hooks/useWeb3Modal.js":"5","/home/alec/swap-share/src/components/index.js":"6","/home/alec/swap-share/src/components/BorrowRequest.js":"7","/home/alec/swap-share/src/components/SwapShare.js":"8","/home/alec/swap-share/src/Constants.js":"9","/home/alec/swap-share/src/components/OpenLoans.js":"10","/home/alec/swap-share/src/components/SplashPage.js":"11","/home/alec/swap-share/src/components/LoanCard.js":"12"},{"size":476,"mtime":1610304631291,"results":"13","hashOfConfig":"14"},{"size":3977,"mtime":1610060558213,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1608155728010,"results":"16","hashOfConfig":"14"},{"size":402,"mtime":1608235219011,"results":"17","hashOfConfig":"14"},{"size":1552,"mtime":1609992311231,"results":"18","hashOfConfig":"14"},{"size":1542,"mtime":1609992252930,"results":"19","hashOfConfig":"14"},{"size":6749,"mtime":1610306345266,"results":"20","hashOfConfig":"14"},{"size":8271,"mtime":1610209501184,"results":"21","hashOfConfig":"14"},{"size":481,"mtime":1610140659475,"results":"22","hashOfConfig":"14"},{"size":3561,"mtime":1610209442304,"results":"23","hashOfConfig":"14"},{"size":370,"mtime":1609973857836,"results":"24","hashOfConfig":"14"},{"size":2820,"mtime":1610212610573,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yv57jw",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"31"},"/home/alec/swap-share/src/index.js",[],"/home/alec/swap-share/src/App.js",["56","57"],"import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport SwapShareABI from './abis/SwapShare.json'\nimport TestnetDAI from './abis/TestnetDAI.json'\n\nimport './App.css'\n\nimport { METAMASK_NETWORKS } from './Constants'\n\nimport { Header, WrongNetHeader } from './components'\nimport SplashPage from './components/SplashPage'\nimport WalletButton from './components/WalletButton'\nimport SwapShare from './components/SwapShare'\nimport OpenLoans from './components/OpenLoans'\n\nimport useWeb3Modal from './hooks/useWeb3Modal'\n\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null)\n  const [networkID, setNetworkID] = useState(null)\n  const [account, setAccount] = useState(null)\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal()\n\n  const [swapShareContract, setSwapShareContract] = useState(null)\n  const [DAIContract, setDAIContract] = useState(null)\n\n  const [isCorrectNetwork, setIsCorrectNetwork] = useState(true)\n  const [isConnected, setIsConnected] = useState(false)\n\n  useEffect(() => {\n    setIsCorrectNetwork(METAMASK_NETWORKS.ganache == window.ethereum.networkVersion)\n\n    window.ethereum.on('chainChanged', (_chainId) => window.location.reload())\n    window.ethereum.on('accountsChanged', (accounts) => {\n      setAccount(accounts[0])\n    })\n\n  }, [])\n\n  useEffect(() => {\n    if (provider != null) {\n      window.ethereum.autoRefreshOnNetworkChange = false\n\n      setNetworkID(window.ethereum.networkVersion)\n      window.ethereum.request({method: 'eth_requestAccounts'}).then((accounts) => {\n        setAccount(accounts[0])\n      })\n      setWeb3(new Web3(provider))\n    }\n  }, [provider])\n\n\n  useEffect(() => {\n    if (web3 != null) {\n      setIsConnected(true)\n\n      setSwapShareContract(new web3.eth.Contract(\n        SwapShareABI.abi,\n        SwapShareABI.networks[networkID].address\n      ))\n\n      setDAIContract(new web3.eth.Contract(\n        TestnetDAI.abi,\n        TestnetDAI.networks[networkID].address\n      ))\n    }\n  }, [web3])\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div>\n          {isCorrectNetwork \n            ? <Header>\n                <div className=\"ml-4\">\n                  {web3 && swapShareContract && account &&\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                      <div style={{minWidth: '10rem'}}>\n                        <Link style={{color: 'white'}} to='/'>Your Activity</Link>\n                      </div>\n                      <div style={{minWidth: '5rem'}}>\n                        <Link style={{color: 'white'}} to='/open-loans'>View Open Loans</Link>\n                      </div>\n                    </div>\n                  }\n                </div> \n        \n                <div style={{display: 'flex', alignItems: 'center'}}>\n                  {isConnected && <div className=\"mr-4\">{account}</div>}\n                  <WalletButton \n                    provider={provider} \n                    loadWeb3Modal={loadWeb3Modal}\n                    logoutOfWeb3Modal={logoutOfWeb3Modal} />\n                </div>\n              </Header>\n            : <WrongNetHeader>\n                <div>Swap Share is currently only available on the Rinkeby Testnet</div>\n              </WrongNetHeader>\n          }\n        </div>\n        <Switch>\n          <Route path='/open-loans'>\n            {web3 && swapShareContract && account\n              ? <OpenLoans web3={web3} account={account} swapShareContract={swapShareContract} />\n              : <SplashPage />\n            } \n          </Route>\n          <Route path='/'>\n            {web3 && swapShareContract && account\n              ? <SwapShare web3={web3} account={account} swapShareContract={swapShareContract} DAIContract={DAIContract} />\n              : <SplashPage />\n            }\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App\n",["58","59"],"/home/alec/swap-share/src/reportWebVitals.js",[],"/home/alec/swap-share/src/components/WalletButton.js",[],"/home/alec/swap-share/src/hooks/useWeb3Modal.js",["60"],"import { useEffect, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"INVALID_INFURA_KEY\";\n\nconst NETWORK_NAME = \"mainnet\";\n\nfunction useWeb3Modal(config = {}) {\n  const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const { infuraId = INFURA_ID, NETWORK = NETWORK_NAME } = config;\n\n  useEffect(() => {\n    const modal = new Web3Modal({\n      network: NETWORK,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId,\n          },\n        },\n      },\n    })\n    setWeb3Modal(modal)\n  }, [])\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = async () => {\n    let newProvider = null;\n    try {\n      newProvider = await web3Modal.connect();\n    } catch (error) {\n      // Modal was closed by user, we dont have to do anything\n    }\n\n    if (newProvider) {\n      setProvider(newProvider)\n    }\n  }\n\n  // Disconnect from wallet\n  const logoutOfWeb3Modal = async () => {\n    if (window.web3.currentProvider && window.web3.currentProvider.close) {\n      await window.web3.currentProvider.close();\n    }\n    web3Modal.clearCachedProvider();\n    window.location.reload();\n    setProvider(null);\n  }\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","/home/alec/swap-share/src/components/index.js",[],"/home/alec/swap-share/src/components/BorrowRequest.js",["61","62","63","64","65"],"/home/alec/swap-share/src/components/SwapShare.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"import React, { useEffect, useState } from 'react'\n\nimport { Container, Title } from './index'\nimport BorrowRequest from './BorrowRequest'\nimport LoanCard from './LoanCard'\nimport { LOAN_STATE, TIME_SECONDS } from '../Constants'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\n\nconst SwapShare = ({web3, account, swapShareContract, DAIContract}) => {\n  const [fulfilledLoans, setFulfilledLoans] = useState(null)\n  const [borrowTransactions, setBorrowTransactions] = useState(null)\n  const [updateRequests, setUpdateRequests] = useState(true)\n\n\n  // Data is refreshed when the user switches accounts\n  useEffect(() => {\n    if (!updateRequests) {\n      getAddressBorrows()\n      getAddressFulfilledLoans()\n    }\n  }, [account])\n\n  useEffect(() => {\n    if (updateRequests) {\n      getAddressBorrows()\n      getAddressFulfilledLoans()\n      setUpdateRequests(false)\n    }\n  }, [updateRequests])\n\n  useEffect(() => {\n    if (borrowTransactions && borrowTransactions.length == 0) {\n      setBorrowTransactions(null)\n    }\n  }, [borrowTransactions])\n\n  useEffect(() => {\n    if (fulfilledLoans && fulfilledLoans.length == 0) {\n      setFulfilledLoans(null)\n    }\n  }, [fulfilledLoans])\n\n  function getAddressBorrows() {\n    swapShareContract.methods\n      .getAddressBorrows(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const expirationDelta = parseInt(value['expirationDelta'])\n            const now = new Date()\n\n            const numDays = Math.floor(expirationDelta / TIME_SECONDS.day)\n            const remainingHours = expirationDelta - (numDays * TIME_SECONDS.day)\n\n            const numHours = Math.floor(remainingHours / TIME_SECONDS.hour)\n            const remainingMinutes = remainingHours - (numHours * TIME_SECONDS.hour)\n\n            const numMinutes = Math.floor(remainingMinutes / TIME_SECONDS.minute)\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': (value['state'] == LOAN_STATE.fulfilled ? expiration.toDateString() : ''),\n              'expirationTime': (value['state'] == LOAN_STATE.fulfilled ? expiration.toLocaleTimeString() : ''),\n              'loanDuration': {days: numDays, hours: numHours, minutes: numMinutes},\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': (value['state'] == LOAN_STATE.fulfilled && (expiration < now))\n            })\n          }\n        })\n        setBorrowTransactions(transactions)\n      })\n  }\n\n  function getAddressFulfilledLoans() {\n    swapShareContract.methods\n      .getAddressFulfilled(account)\n      .call()\n      .then(result => {\n        let transactions = [];\n        result.map(value => {\n          if (value['valid']) {\n            const expiration = new Date(parseInt(value['expiration']) * 1000)\n            const expirationDelta = parseInt(value['expirationDelta'])\n            const now = new Date()\n\n            const numDays = Math.floor(expirationDelta / TIME_SECONDS.day)\n            const remainingHours = expirationDelta - (numDays * TIME_SECONDS.day)\n\n            const numHours = Math.floor(remainingHours / TIME_SECONDS.hour)\n            const remainingMinutes = remainingHours - (numHours * TIME_SECONDS.hour)\n\n            const numMinutes = Math.floor(remainingMinutes / TIME_SECONDS.minute)\n\n            transactions.push({\n              'index': value['index'],\n              'expirationDate': (value['state'] == LOAN_STATE.fulfilled ? expiration.toDateString() : ''),\n              'expirationTime': (value['state'] == LOAN_STATE.fulfilled ? expiration.toLocaleTimeString() : ''),\n              'loanDuration': {days: numDays, hours: numHours, minutes: numMinutes},\n              'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n              'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n              'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n              'interestRate': value['interestRate'],\n              'state': value['state'],\n              'hasExpired': (value['state'] == LOAN_STATE.fulfilled && (expiration < now))\n            })\n          }\n        })\n        setFulfilledLoans(transactions)\n      })\n  }\n\n\n  const cancelBorrowRequest = (index) => () => {\n    swapShareContract.methods\n        .cancelRequestedLoan(index)\n        .send({from: account})\n        .then(() => getAddressBorrows())\n  }  \n\n\n  const payBackLoan = (index, amount)  => () => {\n    const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n\n    swapShareContract.methods\n      .repayLoan(index)\n      .send({\n        from: account,\n        value: ethAmount\n      })\n      .then(() => getAddressBorrows())\n  }\n\n  const claimCollateral = (index) => () => {\n    swapShareContract.methods\n      .claimDefaultedLoan(index)\n      .send({\n        from: account\n      })\n      .then(() => getAddressFulfilledLoans())\n  }\n\n  return (\n    <Container>\n      <div style={{display: 'flex', backgroundColor: '#282c34', justifyContent: 'space-between'}}>\n        <Col className=\"mx-4\" md={3}>\n          <Title className=\"mb-4\">Loans You have Fulfilled</Title>\n          {fulfilledLoans\n            ? <div>\n                {fulfilledLoans.map((value, index) => (\n                  <LoanCard data={value} key={index}>\n                    <Button \n                        variant={value.hasExpired ? 'success' : 'secondary'} \n                        disabled={!value.hasExpired}\n                        onClick={claimCollateral(value.index)}\n                    >\n                      {value.hasExpired ? 'claim collateral' : 'active'}\n                    </Button>   \n                  </LoanCard>\n                ))}\n              </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>Nothing to display</div>\n          }\n        </Col>\n\n        <Col className=\"mx-4\" md={3}>\n          <BorrowRequest \n            account={account} \n            swapShareContract={swapShareContract} \n            daiContract={DAIContract} \n            setUpdateRequests={setUpdateRequests} \n          />\n        </Col>\n\n        <Col className=\"mx-4\" md={3}>\n          <Title className=\"mb-4\">Borrow Requests</Title>\n          {borrowTransactions\n            ? <div>\n                {borrowTransactions.map((value, index) => (\n                  <LoanCard data={value} key={index}>\n                    <div>\n                        {!value.hasExpired && \n                          <Button \n                            variant={value.state == LOAN_STATE.requested ? 'danger' : 'success'} \n                            disabled={value.state == LOAN_STATE.fulfilled}\n                            onClick={cancelBorrowRequest(value.index)}\n                          >\n                            {value.state == LOAN_STATE.requested ? 'cancel request' : 'active'}\n                          </Button>\n                        }\n                        {value.state == LOAN_STATE.fulfilled &&\n                          <Button \n                            variant={value.hasExpired ? \"danger\" : \"primary\"} \n                            className=\"ml-2\"\n                            disabled={value.hasExpired}\n                            onClick={payBackLoan(value.index, value.ethPlusInterest)}\n                          >\n                            {value.hasExpired ? 'Loan has Defaulted' : 'Pay back loan'}\n                          </Button>\n                        }\n                      </div>\n                  </LoanCard>\n                ))}\n              </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>Nothing to display</div>\n          }\n        </Col>\n      </div>\n    </Container>\n  );\n}\n\nexport default SwapShare\n","/home/alec/swap-share/src/Constants.js",[],"/home/alec/swap-share/src/components/OpenLoans.js",["82","83","84","85","86"],"import React, { useEffect, useState } from 'react'\n\nimport { Container, Title } from './index'\nimport LoanCard from './LoanCard'\nimport { LOAN_STATE, TIME_SECONDS } from '../Constants'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\n\nconst OpenLoans = ({ web3, account, swapShareContract }) => {\n    const [openLoans, setOpenLoans] = useState(null)\n\n    useEffect(() => {\n        getAllOpenLoans()\n    }, [account])\n\n    useEffect(() => {\n        if (openLoans && openLoans.length === 0) {\n            setOpenLoans(null)\n        }\n    }, [openLoans])\n\n    const getAllOpenLoans = () => {\n        swapShareContract.methods\n          .getAllRequests(account)\n          .call()\n          .then(result => {\n            let transactions = [];\n            result.map(value => {\n              if (value['valid']) {\n                const expiration = new Date(parseInt(value['expiration']) * 1000)\n                const expirationDelta = parseInt(value['expirationDelta'])\n                const now = new Date()\n    \n                const numDays = Math.floor(expirationDelta / TIME_SECONDS.day)\n                const remainingHours = expirationDelta - (numDays * TIME_SECONDS.day)\n    \n                const numHours = Math.floor(remainingHours / TIME_SECONDS.hour)\n                const remainingMinutes = remainingHours - (numHours * TIME_SECONDS.hour)\n    \n                const numMinutes = Math.floor(remainingMinutes / TIME_SECONDS.minute)\n    \n                transactions.push({\n                  'index': value['index'],\n                  'expirationDate': (value['state'] == LOAN_STATE.fulfilled ? expiration.toDateString() : ''),\n                  'expirationTime': (value['state'] == LOAN_STATE.fulfilled ? expiration.toLocaleTimeString() : ''),\n                  'loanDuration': {days: numDays, hours: numHours, minutes: numMinutes},\n                  'daiAmount': web3.utils.fromWei(value['daiAmount'], 'ether'),\n                  'ethAmount': web3.utils.fromWei(value['ethAmount'], 'ether'),\n                  'ethPlusInterest': web3.utils.fromWei(value['ethPlusInterest'], 'ether'),\n                  'interestRate': value['interestRate'],\n                  'state': value['state'],\n                  'hasExpired': (value['state'] == LOAN_STATE.fulfilled && (expiration < now))\n                })\n              }\n            })\n            setOpenLoans(transactions)\n          })\n      }\n\n      const fulfillLoan = (index, amount) => () => {\n        const ethAmount = web3.utils.toWei(amount, 'ether').toString()\n    \n        swapShareContract.methods\n          .fulfillLoan(index)\n          .send({\n            from: account,\n            value: ethAmount\n          })\n          .then(() => getAllOpenLoans())\n      }\n\n    return (\n      <Container>\n        <Col className=\"mx-auto\" md={4}>\n          <Title className=\"mb-4\">Open Loan Requests</Title>\n          {openLoans\n            ? <div>\n                {openLoans.map((value, index) => (\n                  <LoanCard data={value} key={index}>\n                    <Button variant='success' onClick={fulfillLoan(value.index, value.ethAmount)}>\n                        fulfill loan\n                    </Button>\n                  </LoanCard>\n                ))}\n                </div>\n            : <div style={{height: '10rem', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#6c757d'}}>\n                No loans to display at this time\n              </div>\n          }\n        </Col>\n      </Container>\n    )\n  }\n\nexport default OpenLoans","/home/alec/swap-share/src/components/SplashPage.js",[],"/home/alec/swap-share/src/components/LoanCard.js",["87","88"],"import React, { useState } from 'react'\n\nimport { LOAN_STATE } from '../Constants'\n\nimport Card from 'react-bootstrap/Card'\nimport Collapse from 'react-bootstrap/Collapse'\n\nconst LoanCard = ({ data, children }) => {\n    const [open, setOpen] = useState(false)\n\n    return (\n        <Card className=\"mb-4\" style={{color: '#282c34', minWidth: '20rem'}}>\n            <Card.Header style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                <div>\n                    <div>Requested: {data.ethAmount} ETH</div>\n                    <div>Collateral: {data.daiAmount} DAI</div>\n                </div>\n                <div \n                    style={{\n                        backgroundColor: '#C0C0C0', \n                        width: '2rem', \n                        height: '2rem',\n                        borderRadius: '0.25rem',\n                        cursor: 'pointer',\n                        textAlign: 'center'\n                    }}\n                    onClick={() => setOpen(!open)} \n                    aria-expanded={open}\n                >\n                    {open \n                        ? <b>-</b>\n                        : <b>+</b>\n                    }\n                </div>\n            </Card.Header>\n            <Collapse in={open}>\n                <div>\n                    <Card.Body>\n                        <div className=\"mb-3\">Interest rate: <b>{data.interestRate}%</b></div>\n                        <div className=\"mb-3\">To be paid back: <b>{data.ethPlusInterest} ETH</b></div>\n                        {data.state == LOAN_STATE.requested &&\n                            <div>\n                                <div>Proposed Loan Duration: </div>\n                                <div className=\"ml-4 mb-3\">\n                                    <div>Days: <b>{data.loanDuration.days}</b></div>\n                                    <div>Hours: <b>{data.loanDuration.hours}</b></div>\n                                    <div>Minutes: <b>{data.loanDuration.minutes}</b></div>\n                                </div>\n                            </div> \n                        }\n\n                        {data.state == LOAN_STATE.fulfilled &&\n                            <div>\n                                <div>Loan Expiration Date: </div>\n                                <div className=\"ml-4 mb-3\">\n                                    <div>Date: <b>{data.expirationDate}</b></div>\n                                    <div>Time: <b>{data.expirationTime}</b></div>\n                                </div>\n                            </div>\n                        }\n                    \n                        { children }\n                    </Card.Body>\n\n                </div>\n                \n            </Collapse>\n        </Card>\n    )\n}\n\nexport default LoanCard",{"ruleId":"89","severity":1,"message":"90","line":39,"column":51,"nodeType":"91","messageId":"92","endLine":39,"endColumn":53},{"ruleId":"93","severity":1,"message":"94","line":75,"column":6,"nodeType":"95","endLine":75,"endColumn":12,"suggestions":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"93","severity":1,"message":"101","line":30,"column":6,"nodeType":"95","endLine":30,"endColumn":8,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":27,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"103","severity":1,"message":"107","line":1,"column":38,"nodeType":"105","messageId":"106","endLine":1,"endColumn":44},{"ruleId":"89","severity":1,"message":"90","line":27,"column":44,"nodeType":"91","messageId":"92","endLine":27,"endColumn":46},{"ruleId":"89","severity":1,"message":"90","line":28,"column":46,"nodeType":"91","messageId":"92","endLine":28,"endColumn":48},{"ruleId":"89","severity":1,"message":"90","line":29,"column":50,"nodeType":"91","messageId":"92","endLine":29,"endColumn":52},{"ruleId":"93","severity":1,"message":"108","line":24,"column":6,"nodeType":"95","endLine":24,"endColumn":15,"suggestions":"109"},{"ruleId":"93","severity":1,"message":"110","line":32,"column":6,"nodeType":"95","endLine":32,"endColumn":22,"suggestions":"111"},{"ruleId":"89","severity":1,"message":"90","line":35,"column":57,"nodeType":"91","messageId":"92","endLine":35,"endColumn":59},{"ruleId":"89","severity":1,"message":"90","line":41,"column":49,"nodeType":"91","messageId":"92","endLine":41,"endColumn":51},{"ruleId":"112","severity":1,"message":"113","line":52,"column":26,"nodeType":"114","messageId":"115","endLine":52,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":68,"column":49,"nodeType":"91","messageId":"92","endLine":68,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":69,"column":49,"nodeType":"91","messageId":"92","endLine":69,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":76,"column":45,"nodeType":"91","messageId":"92","endLine":76,"endColumn":47},{"ruleId":"112","severity":1,"message":"113","line":90,"column":26,"nodeType":"114","messageId":"115","endLine":90,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":106,"column":49,"nodeType":"91","messageId":"92","endLine":106,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":107,"column":49,"nodeType":"91","messageId":"92","endLine":107,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":114,"column":45,"nodeType":"91","messageId":"92","endLine":114,"endColumn":47},{"ruleId":"89","severity":1,"message":"90","line":193,"column":50,"nodeType":"91","messageId":"92","endLine":193,"endColumn":52},{"ruleId":"89","severity":1,"message":"90","line":194,"column":51,"nodeType":"91","messageId":"92","endLine":194,"endColumn":53},{"ruleId":"89","severity":1,"message":"90","line":197,"column":42,"nodeType":"91","messageId":"92","endLine":197,"endColumn":44},{"ruleId":"89","severity":1,"message":"90","line":200,"column":38,"nodeType":"91","messageId":"92","endLine":200,"endColumn":40},{"ruleId":"93","severity":1,"message":"116","line":15,"column":8,"nodeType":"95","endLine":15,"endColumn":17,"suggestions":"117"},{"ruleId":"112","severity":1,"message":"113","line":29,"column":30,"nodeType":"114","messageId":"115","endLine":29,"endColumn":32},{"ruleId":"89","severity":1,"message":"90","line":45,"column":53,"nodeType":"91","messageId":"92","endLine":45,"endColumn":55},{"ruleId":"89","severity":1,"message":"90","line":46,"column":53,"nodeType":"91","messageId":"92","endLine":46,"endColumn":55},{"ruleId":"89","severity":1,"message":"90","line":53,"column":49,"nodeType":"91","messageId":"92","endLine":53,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":41,"column":37,"nodeType":"91","messageId":"92","endLine":41,"endColumn":39},{"ruleId":"89","severity":1,"message":"90","line":52,"column":37,"nodeType":"91","messageId":"92","endLine":52,"endColumn":39},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'networkID'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSwapShareContract' needs the current value of 'networkID'.","ArrayExpression",["118"],"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"React Hook useEffect has missing dependencies: 'NETWORK' and 'infuraId'. Either include them or remove the dependency array.",["121"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'getAddressBorrows', 'getAddressFulfilledLoans', and 'updateRequests'. Either include them or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'getAddressBorrows' and 'getAddressFulfilledLoans'. Either include them or remove the dependency array.",["123"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getAllOpenLoans'. Either include it or remove the dependency array.",["124"],{"desc":"125","fix":"126"},"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [networkID, web3]",{"range":"135","text":"136"},"Update the dependencies array to be: [NETWORK, infuraId]",{"range":"137","text":"138"},"Update the dependencies array to be: [account, getAddressBorrows, getAddressFulfilledLoans, updateRequests]",{"range":"139","text":"140"},"Update the dependencies array to be: [getAddressBorrows, getAddressFulfilledLoans, updateRequests]",{"range":"141","text":"142"},"Update the dependencies array to be: [account, getAllOpenLoans]",{"range":"143","text":"144"},[2081,2087],"[networkID, web3]",[850,852],"[NETWORK, infuraId]",[752,761],"[account, getAddressBorrows, getAddressFulfilledLoans, updateRequests]",[911,927],"[getAddressBorrows, getAddressFulfilledLoans, updateRequests]",[440,449],"[account, getAllOpenLoans]"]