[{"/home/alec/swap-share/src/index.js":"1","/home/alec/swap-share/src/App.js":"2","/home/alec/swap-share/src/reportWebVitals.js":"3","/home/alec/swap-share/src/components/WalletButton.js":"4","/home/alec/swap-share/src/hooks/useWeb3Modal.js":"5","/home/alec/swap-share/src/components/index.js":"6","/home/alec/swap-share/src/components/BorrowRequest.js":"7","/home/alec/swap-share/src/components/SwapShare.js":"8","/home/alec/swap-share/src/Constants.js":"9"},{"size":571,"mtime":1609368651983,"results":"10","hashOfConfig":"11"},{"size":2117,"mtime":1609619475360,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608155728010,"results":"13","hashOfConfig":"11"},{"size":402,"mtime":1608235219011,"results":"14","hashOfConfig":"11"},{"size":1420,"mtime":1608789385191,"results":"15","hashOfConfig":"11"},{"size":1246,"mtime":1609535193629,"results":"16","hashOfConfig":"11"},{"size":4231,"mtime":1609621098815,"results":"17","hashOfConfig":"11"},{"size":10426,"mtime":1609699386165,"results":"18","hashOfConfig":"11"},{"size":128,"mtime":1609622169288,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1yv57jw",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/alec/swap-share/src/index.js",[],["41","42"],"/home/alec/swap-share/src/App.js",["43"],"import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nimport SwapShareABI from './abis/SwapShare.json'\nimport TestnetDAI from './abis/TestnetDAI.json'\n\nimport './App.css'\nimport logo from './logo.svg'\n\nimport { Header, Splash } from './components'\nimport WalletButton from './components/WalletButton'\nimport SwapShare from './components/SwapShare'\n\nimport useWeb3Modal from './hooks/useWeb3Modal'\n\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null)\n  const [networkID, setNetworkID] = useState(null)\n  const [account, setAccount] = useState(null)\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal()\n\n  const [swapShareContract, setSwapShareContract] = useState(null)\n  const [DAIContract, setDAIContract] = useState(null)\n\n  useEffect(() => {\n    if (provider != null) {\n      window.ethereum.autoRefreshOnNetworkChange = false\n\n      setNetworkID(window.ethereum.networkVersion)\n      window.ethereum.request({method: 'eth_requestAccounts'}).then((accounts) => {\n        setAccount(accounts[0])\n      })\n      setWeb3(new Web3(provider))\n    }\n  }, [provider])\n\n\n  useEffect(() => {\n    if (web3 != null) {\n      setSwapShareContract(new web3.eth.Contract(\n        SwapShareABI.abi,\n        SwapShareABI.networks[networkID].address\n      ))\n\n      setDAIContract(new web3.eth.Contract(\n        TestnetDAI.abi,\n        TestnetDAI.networks[networkID].address\n      ))\n    }\n  }, [web3])\n\n\n  return (\n    <div className=\"App\">\n      <Header>\n        <div className=\"mr-2\">{account}</div>\n        <WalletButton provider={provider} loadWeb3Modal={loadWeb3Modal} logoutOfWeb3Modal={logoutOfWeb3Modal} />\n      </Header>\n      {web3 && swapShareContract && account\n        ? <SwapShare web3={web3} account={account} swapShareContract={swapShareContract} DAIContract={DAIContract} />\n        : <Splash>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <div style={{fontSize: '2rem'}}>SwapShare</div>\n            <div>An anonymous, direct peer-to-peer crypto lending service</div>\n          </Splash>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","/home/alec/swap-share/src/reportWebVitals.js",[],"/home/alec/swap-share/src/components/WalletButton.js",[],"/home/alec/swap-share/src/hooks/useWeb3Modal.js",[],"/home/alec/swap-share/src/components/index.js",[],"/home/alec/swap-share/src/components/BorrowRequest.js",["44"],"import React, { useState } from 'react'\nimport Flatpickr from \"react-flatpickr\"\nimport BigNumber from \"bignumber.js\"\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst BorrowRequest = ({ account, swapShareContract, daiContract, setUpdateRequests }) => {\n    const [validated, setValidated] = useState(false)\n    const [approved, setApproved] = useState(false)\n    const approvalAmount = new BigNumber('1000e+18').toFixed()\n\n    const [daiAmount, setDaiAmount] = useState('')\n    const [ethAmount, setEthAmount] = useState('')\n    const [expirationDate, setExpirationDate] = useState(null)\n    const [interestRate, setInterestRate] = useState('')\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.stopPropagation();\n        } else {\n            setValidated(true);\n            submitBorrowRequest()\n        }\n\n        event.preventDefault()\n      };\n\n    const handleChange = setFunc => e => {\n        setFunc(e.target.value)\n    }\n\n    function submitBorrowRequest() {\n        let amountToSend = new BigNumber(`${daiAmount}e+18`).toString()\n        let ethRequested = new BigNumber(`${ethAmount}e+18`).toString()\n\n        if (approved) {\n            sendDAI(expirationDate, amountToSend, ethRequested, interestRate)\n        } else {\n            daiContract.methods\n            .approve(swapShareContract._address, approvalAmount)\n            .send({from: account})\n            .then(() => {\n                setApproved(true)\n                sendDAI(expirationDate, amountToSend, ethRequested, interestRate)\n            })\n            .catch(e => console.error(e))\n        }\n    }\n\n    function sendDAI(expiration, amount, ethRequested, interestRate) {\n        swapShareContract.methods\n            .requestLoan(expiration, amount, ethRequested, interestRate)\n            .send({from: account})\n            .then(() => setUpdateRequests(true))\n    }\n\n    return (\n        <Form noValidate validated={validated} onSubmit={handleSubmit} style={{display: 'flex', flexDirection: 'column'}}>\n            <Form.Label>Create a Borrow Request</Form.Label>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">ETH to request</Form.Text>\n                <Form.Control placeholder=\"ETH amount\" value={ethAmount} onChange={handleChange(setEthAmount)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify ETH.\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">DAI to store as collateral</Form.Text>\n                <Form.Control placeholder=\"DAI amount\" value={daiAmount} onChange={handleChange(setDaiAmount)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify DAI.\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">Interest rate that you will borrow at</Form.Text>\n                <Form.Control placeholder=\"Interest rate\" value={interestRate} onChange={handleChange(setInterestRate)} required />\n                <Form.Control.Feedback type=\"invalid\">\n                    Please specify an interest rate\n                </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Text className=\"text-muted\">Date and time that loan must be paid by</Form.Text>\n                <Flatpickr className=\"mt-2\"\n                    options={{ \n                        minDate: \"2017-01-01\",\n                        enableTime: true,\n                        dateFormat: \"M d, Y  h:i K\",\n                        defaultDate: \"today\",\n                        minDate: \"today\" \n                    }}\n                    onChange={date => {\n                        let utcTimestamp = date[0].getTime() / 1000\n                        setExpirationDate(utcTimestamp)\n                    }}\n                />\n            </Form.Group>\n\n            <Button className=\"mt-2\" variant=\"light\" type=\"submit\">Submit</Button>\n        </Form>\n    );\n  }\n\nexport default BorrowRequest","/home/alec/swap-share/src/components/SwapShare.js",["45","46","47","48","49","50","51","52","53","54","55"],"/home/alec/swap-share/src/Constants.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":51,"column":6,"nodeType":"62","endLine":51,"endColumn":12,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":96,"column":25,"nodeType":"66","messageId":"67","endLine":96,"endColumn":32},{"ruleId":"60","severity":1,"message":"68","line":24,"column":6,"nodeType":"62","endLine":24,"endColumn":22,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":27,"column":57,"nodeType":"72","messageId":"67","endLine":27,"endColumn":59},{"ruleId":"70","severity":1,"message":"71","line":33,"column":43,"nodeType":"72","messageId":"67","endLine":33,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":39,"column":49,"nodeType":"72","messageId":"67","endLine":39,"endColumn":51},{"ruleId":"73","severity":1,"message":"74","line":50,"column":26,"nodeType":"75","messageId":"76","endLine":50,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":76,"column":26,"nodeType":"75","messageId":"76","endLine":76,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":104,"column":26,"nodeType":"75","messageId":"76","endLine":104,"endColumn":28},{"ruleId":"70","severity":1,"message":"71","line":253,"column":52,"nodeType":"72","messageId":"67","endLine":253,"endColumn":54},{"ruleId":"70","severity":1,"message":"71","line":254,"column":53,"nodeType":"72","messageId":"67","endLine":254,"endColumn":55},{"ruleId":"70","severity":1,"message":"71","line":257,"column":44,"nodeType":"72","messageId":"67","endLine":257,"endColumn":46},{"ruleId":"70","severity":1,"message":"71","line":260,"column":40,"nodeType":"72","messageId":"67","endLine":260,"endColumn":42},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'networkID'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSwapShareContract' needs the current value of 'networkID'.","ArrayExpression",["79"],"no-dupe-keys","Duplicate key 'minDate'.","ObjectExpression","unexpected","React Hook useEffect has missing dependencies: 'getAddressBorrows', 'getAddressFulfilledLoans', and 'getAllRequests'. Either include them or remove the dependency array.",["80"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [networkID, web3]",{"range":"85","text":"86"},"Update the dependencies array to be: [getAddressBorrows, getAddressFulfilledLoans, getAllRequests, updateRequests]",{"range":"87","text":"88"},[1429,1435],"[networkID, web3]",[746,762],"[getAddressBorrows, getAddressFulfilledLoans, getAllRequests, updateRequests]"]